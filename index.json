[{"authors":["admin"],"categories":null,"content":"Bio Antonin Raffin is a research engineer at the German Aerospace Center (DLR) who specializes in reinforcement learning (RL). He is the lead developer of Stable-Baselines3 (SB3), an open-source library that implements Deep RL algorithms. His main focus is on learning controllers directly on real robots and improving the reproducibility of RL.\n","date":1761642000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1761642000,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Bio Antonin Raffin is a research engineer at the German Aerospace Center (DLR) who specializes in reinforcement learning (RL). He is the lead developer of Stable-Baselines3 (SB3), an open-source library that implements Deep RL algorithms.","tags":null,"title":"Antonin Raffin","type":"authors"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1761642000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761642000,"objectID":"22a8aafa168a7076d0098c6663a0dfe8","permalink":"/talk/phd-defense-tum/","publishdate":"2025-01-01T00:08:00Z","relpermalink":"/talk/phd-defense-tum/","section":"talk","summary":"","tags":["Reinforcement Learning"],"title":"PhD Defense: Enabling Reinforcement Learning on Real Robots","type":"talk"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1758960000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1758960000,"objectID":"34aca000370b61988e574ac10a0418f8","permalink":"/talk/write-easy-use-software/","publishdate":"2025-01-01T00:08:00Z","relpermalink":"/talk/write-easy-use-software/","section":"talk","summary":"Hardware without software is like an instrument without a musician. Based on my experience maintaining the Stable-Baselines3 library and working with real robots, I will present key principles for creating easy-to-use interfaces.","tags":["Robotics"],"title":"Designing (Robot) Software That Is Easy to Use","type":"talk"},{"authors":null,"categories":null,"content":"This second post details how I tuned the Soft-Actor Critic (SAC) algorithm to learn as fast as PPO in the context of a massively parallel simulator (thousands of robots simulated in parallel). If you read along, you will learn how to automatically tune SAC for speed (i.e., minimize wall clock time), how to find better action boundaries, and what I tried that didn\u0026rsquo;t work.\nPart I is about analysing why SAC doesn\u0026rsquo;t work how of the box on Isaac Sim environments. Part II is about tuning SAC for speed and making it work as good as PPO. In the Previous Episode\u0026hellip; In the first part, I stopped at the point where we could detect some signs of life from SAC (it was learning something).\nBy limiting the action space limits to 3% of the original size, and quickly tuning SAC (bigger network, reduced initial exploration rate), I could get SAC to learn to solve the Unitree A1 task on a flat surface in a matter of minutes.\nHowever, SAC took more time to train than PPO (12 minutes vs. 6 minutes), and it did not reach PPO\u0026rsquo;s performance level. Luckily, I still had several ideas for improving SAC\u0026rsquo;s training speed and performance1.\nDefining Proper Action Bound - Extracting the Limits with PPO First, I wanted to define the action space more precisely. Correctly defining the boundaries of the action space is important for both the speed of convergence and the final performance. A larger action space gives the agent more flexibility, which can lead to better performance, but slower learning. Conversely, a smaller action space can accelerate learning, though it may result in suboptimal solutions.\nThus, rather than simply restricting the action space to a small percentage of the original, I recorded the actions taken by a trained PPO agent and took the 2.5th and 97.5th percentiles for the new limits. In other words, the new action space contains 95% of the actions commanded by a trained PPO agent2:\n# np.percentile(actions, 2.5, axis=0) low = np.array([-2.0, -0.4, -2.6, -1.3, -2.2, -1.9, -0.7, -0.4, -2.1, -2.4, -2.5, -1.7]) # np.percentile(actions, 97.5, axis=0) high = np.array([1.1, 2.6, 0.7, 1.9, 1.3, 2.6, 3.4, 3.8, 3.4, 3.4, 1.9, 2.1]) Need for Speed or: How I Learned to Stop Worrying About Sample Efficiency The second aspect I wanted to improve was the hyperparameters of the SAC algorithm. The default hyperparameters of the SAC algorithm are optimized for sample efficiency. While this is ideal for learning directly on a single real robot, it is suboptimal for training thousands of robots in simulation.\nIn part one, I quickly tuned SAC by hand to get it up and running. This was sufficient for obtaining initial results, but it would be very time-consuming to continue tuning manually in order to reach PPO\u0026rsquo;s performance level. That\u0026rsquo;s why I turned to automatic hyperparameter optimization.\nIf you are not familiar with automatic hyperparameter tuning, I wrote two blog posts about it:\nAutomatic Hyperparameter Tuning - A Visual Guide (Part 1) Automatic Hyperparameter Tuning - In Practice (Part 2) shows how to use the Optuna library to put these techniques into practice New Objective: Learn as Fast as Possible Since I\u0026rsquo;m using a massively parallel simulator, I no longer care about how many samples are needed to learn something, but rather, how quickly it can learn, regardless of the number of samples used. In practice, this translates to an objective function that looks like this:\ndef objective(trial: optuna.Trial) -\u0026gt; float: \u0026quot;\u0026quot;\u0026quot;Optimize for best performance after 5 minutes of training.\u0026quot;\u0026quot;\u0026quot; # Sample hyperparameters hyperparams = sample_sac_params(trial) agent = sbx.SAC(env=env, **hyperparams) # Callback to exit the training loop after 5 minutes callback = TimeoutCallback(timeout=60 * 5) # Train with a max budget of 50_000_000 timesteps agent.learn(total_timesteps=int(5e7), callback=callback) # Log the number of interactions with the environments trial.set_user_attr(\u0026quot;num_timesteps\u0026quot;, agent.num_timesteps) # Evaluate the trained agent env.seed(args_cli.seed) mean_reward, std_reward = evaluate_policy(agent, env, n_eval_episodes=512) return mean_reward The agent is evaluated after five minutes of training, regardless of how many interactions with the environment were needed (the TimeoutCallback forces the agent to exit the training loop).\nSAC Hyperparameters Sampler Similar to PPO, many hyperparameters can be tuned for SAC. After some trial and error, I came up with the following sampling function (I\u0026rsquo;ve included comments that explain the meaning of each parameter):\ndef sample_sac_params(trial: optuna.Trial) -\u0026gt; dict[str, Any]: # Discount factor gamma = trial.suggest_float(\u0026quot;gamma\u0026quot;, 0.975, 0.995) learning_rate = trial.suggest_float(\u0026quot;learning_rate\u0026quot;, 1e-4, 0.002, log=True) # Initial exploration rate (entropy coefficient in the SAC loss) ent_coef_init = trial.suggest_float(\u0026quot;ent_coef_init\u0026quot;, 0.001, 0.02, log=True) # From 2^7=128 to 2^12 = 4096, the mini-batch size batch_size_pow = trial.suggest_int(\u0026quot;batch_size_pow\u0026quot;, 7, 12, log=True) # How big should should the actor and critic networks be # net_arch = trial.suggest_categorical(\u0026quot;net_arch\u0026quot;, [\u0026quot;default\u0026quot;, \u0026quot;simba\u0026quot;, \u0026quot;large\u0026quot;]) # I'm using integers to be able to use CMA-ES, # \u0026quot;default\u0026quot; is [256, 256], \u0026quot;large\u0026quot; is [512, 256, 128] net_arch_complexity = trial.suggest_int(\u0026quot;net_arch_complexity\u0026quot;, 0, 3) # From 1 to 8 (how often should we update the networks, every train_freq steps in the env) train_freq_pow = trial.suggest_int(\u0026quot;train_freq_pow\u0026quot;, 0, 3) # From 1 to 1024 (how many gradient steps by step in the environment) gradient_steps_pow = trial.suggest_int(\u0026quot;gradient_steps_pow\u0026quot;, 0, 10) # From 1 to 32 (the policy delay parameter, similar to TD3 update) policy_delay_pow = trial.suggest_int(\u0026quot;policy_delay_pow\u0026quot;, 0, 5) # Polyak coeff (soft update of the target network) tau = trial.suggest_float(\u0026quot;tau\u0026quot;, 0.001, 0.05, log=True) # Display true values trial.set_user_attr(\u0026quot;batch_size\u0026quot;, 2**batch_size_pow) trial.set_user_attr(\u0026quot;gradient_steps\u0026quot;, 2**gradient_steps_pow) trial.set_user_attr(\u0026quot;policy_delay\u0026quot;, 2**policy_delay_pow) trial.set_user_attr(\u0026quot;train_freq\u0026quot;, 2**train_freq_pow) # Note: to_hyperparams() does the convertions between sampled value and expected value # Ex: converts batch_size_pow to batch_size # This is useful when replaying trials return to_hyperparams({ \u0026quot;train_freq_pow\u0026quot;: train_freq_pow, \u0026quot;gradient_steps_pow\u0026quot;: gradient_steps_pow, \u0026quot;batch_size_pow\u0026quot;: batch_size_pow, \u0026quot;tau\u0026quot;: tau, \u0026quot;gamma\u0026quot;: gamma, \u0026quot;learning_rate\u0026quot;: learning_rate, \u0026quot;policy_delay_pow\u0026quot;: policy_delay_pow, \u0026quot;ent_coef_init\u0026quot;: ent_coef_init, \u0026quot;net_arch_complexity\u0026quot;: net_arch_complexity, }) Replay Ratio A metric that will be useful to understand the tuned hyperparameters is the replay ratio. The replay ratio (also known as update-to-data ratio or UTD ratio) measures the number of gradient updates performed per environment interaction or experience collected. This ratio represents how many times an agent updates its parameters relative to how much new experience it gathers. For SAC, it is defined as replay_ratio = gradient_steps / (num_envs * train_freq).\nIn a classic setting, the replay ratio is usually greater than one when optimizing for sample efficiency. That means that SAC does at least one gradient step per interaction with the environment. However, in the current setting, since collecting new data is cheap, the replay ratio tends to be lower than 1/4 (one gradient step for every four steps in the environment).\nOptimization Result - Tuned Hyperparameters To optimize the hyperparameters, I used Optuna\u0026rsquo;s CMA-ES sampler for 100 trials3 (taking about 10 hours with a population size of 10 individuals). Afterward, I retrained the best trials to filter out any lucky seeds, i.e., to find hyperparameters that work consistently across different runs.\nThis is what the optimization history looks like. Many sets of hyperparameters were successful:\nHyperparameter optimization history\nThese are the tuned hyperparameters of SAC found by the CMA-ES sampler while optimizing for speed:\nbatch_size: 512 buffer_size: 2_000_000 ent_coef: auto_0.009471776840423638 gamma: 0.983100250213744 gradient_steps: 32 learning_rate: 0.00044689099625712413 learning_starts: 2000 policy: MlpPolicy policy_delay: 8 policy_kwargs: net_arch: [512, 256, 128] activation_fn: !!python/name:isaaclab_rl.sb3.elu '' optimizer_class: !!python/name:optax._src.alias.adamw '' layer_norm: true tau: 0.0023055560568780655 train_freq: 1 Compared to the default hyperparameters of SAC, there are some notable changes:\nThe network architecture is much larger ([512, 256, 128] vs. [256, 256]), but similar to that used by PPO in Isaac Sim. The lower replay ratio (RR ≈ 0.03 for 1024 environments, or three gradient steps every 100 steps in an environment) and higher policy delay (update the actor once every eight critic updates) make it faster, as less time is taken for gradient updates. The discount factor is lower than the default value of 0.99, which favors shorter-term rewards. Here is the result in video and the associated learning curves4:\nLearning curve on the Unitree A1 task using 1024 envs.\nTrained SAC agent after automatic tuning.\nWith these tuned hyperparameters, SAC learns faster (than in part I), achieves higher performance, and the learned gaits look better (no more feet in the air!). What more could you ask for?\nDoes it work? - More Environments After it successfully learned on the flat Unitree A1 environment, I tested the same hyperparameters (with the same recipe5) on the GO1, GO2, Anymal-B, and Anymal-C environments, as well as the flat Disney BD-X environment and \u0026hellip; it worked!\nTrained SAC agent in different environments, using the same tuned hyperparameters.\nThen, I trained SAC on the \u0026ldquo;rough\u0026rdquo; locomotion environments, which are harder environments where the robot has to learn to navigate steps and uneven, accidented terrain (with additional randomization). And \u0026hellip; it worked partially.\nSolving Harder Environments Identifying the problem: Why it doesn\u0026rsquo;t work? In the \u0026ldquo;Rough\u0026rdquo; environment, the SAC-trained agent exhibits inconsistent behavior. For example, one time the robot successfully climbs down the pyramid steps without falling; at other times, however, it does nothing. Additionally, no matter how long it is trained, SAC does not seem to be able to learn to solve the \u0026ldquo;inverted pyramid\u0026rdquo;, which is probably one of the hardest tasks:\nThe inverted pyramid task.\nI decided to isolate this task by training SAC only on the inverted pyramid. Upon further inspection, it appeared to be an exploration problem; that is, SAC never experiences successful stepping when executing random movements. This reminded me of SAC failing on the mountain car problem because the exploration was inconsistent (the default high-frequency noise is usually a bad default for robots).\nImproving Exploration and Performance To test this hypothesis, I simplified the problem by lowering the step of the inverted pyramid and used a more consistent exploration scheme, gSDE (that I developed during my PhD to train RL directly on real robots).\nIn its simplest form, gSDE repeats the noise vector for $n$-steps, instead of sampling it at every timestep. In other words, instead of selecting actions following $a_t = \\mu_\\theta(s_t) + \\epsilon_t$6 and sampling $\\epsilon_t \\sim N(0, \\sigma^2)$ at every step during exploration, gSDE samples $\\epsilon \\sim N(0, \\sigma^2)$ once and keeps $\\epsilon$ constant for $n$-steps. With this improved exploration, the robot could finally learn to partially solve this task.\nTrained SAC agent with gSDE and n-step return in the \"Rough\" Anymal-C environment.\nThere was still a big gap in final performance between SAC and PPO. To close the gap, I drew inspiration from the recent FastTD3 paper and implemented n-step returns for all off-policy algorithms in SB3. Using n_steps=3 allowed SAC to finally solve the hardest task7!\nIn summary, here are the additional manual changes I made to the hyperparameters of SAC compared to those optimized automatically:\n# Note: we must use train_freq \u0026gt; 1 to enable gSDE # which resamples the noise every n steps (here every 10 steps) train_freq: 10 # Scaling the gradient steps accordingly, to keep the same replay ratio: # 32 * train_freq = 320 gradient_steps: 320 use_sde: True # N-step return n_steps: 3 And here are the associated learning curves4(plotting the current curriculum level on the y-axis8):\nLearning curve on the Anymal-C \"Rough\" task using 1024 envs (except for PPO).\nLearning curve in term of sample-effiency on the Anymal-C \"Rough\" task using 1024 envs (except for PPO).\nIn those plots, you can see the effect of gSDE and the use of n-step returns. SAC is also much more sample efficient than PPO.\nConclusion This concludes the long journey I started a few months ago to make SAC work on a massively parallel simulator. During this adventure, I addressed a common issue that prevents SAC-like algorithms from working in these environments: the use of an unbounded action space. In the end, with a proper action space and tuned hyperparameters, SAC is now competitive with PPO7 in terms of training time (while being much more sample efficient) on a large collection of locomotion environments. I hope my voyage encourages others to use SAC in their experiments and unlock fine-tuning on real robots after pretraining in simulation.\nAppendix: What I Tried That Didn\u0026rsquo;t Work While preparing this blog post, I tried many things to achieve PPO performance and learn good policies in minimal time. Many of the things I tried didn\u0026rsquo;t work, but they are probably worth investigating further. I hope you can learn from my failures, too.\nUsing an Unbounded Gaussian Distribution One approach I tried was to make SAC look more like PPO. In part one, PPO could handle an unbounded action space because it used a (non-squashed) Gaussian distribution (vs. a squashed one for SAC). However, replacing SAC\u0026rsquo;s squashed Normal distribution with an unbounded Gaussian distribution led to additional problems.\nWithout layer normalization in the critic, it quickly diverges (leading to Inf/NaN). It seems that, encouraged by the entropy bonus, the actor pushes toward very large action values. It also appears that this variant requires specific tuning (and that state-dependent std may need to be replaced with state-independent std, as is done for PPO).\nIf you manage to reliably make SAC work with an unbounded Gaussian distribution, please reach out!\nKL Divergence Adaptive Learning Rate One component of PPO that allows for better performance is the learning rate schedule (although it is not critical, it ease hyperparameter tuning). It automatically adjusts the learning rate to maintain a constant KL divergence between two updates, ensuring that the new policy remains close to the previous one (and ensuring that the learning rate is large enough too). It should be possible to do something similar with SAC. However, when I tried to approximate the KL divergence using either the log probability or the extracted Gaussian parameters (mean and standard deviation), it didn\u0026rsquo;t work. The KL divergence values were too large and inconsistent. SAC would probably need a trust region mechanism as well.\nAgain, if you find a way to make it work, please reach out!\nTruncated Quantile Critics (TQC) One idea I had to improve performance was to replace the SAC algorithm with its distributional counterpart Truncated Quantile Critics (TQC). Rather than approximating only the expected return, TQC models the distribution of returns. TQC\u0026rsquo;s performance tends to be on par with SAC\u0026rsquo;s, but it can outperform SAC in harder environments (at the cost of a slightly more expensive gradient step). TQC also has a parameter that controls the overestimation bias of the Q-value function (how many top quantiles to drop).\nWhile writting this blog (and doing experiments), TQC tended to be more easy to tune. However, after finding good hyperparmaters for speed, SAC was faster and reach equivalent performance compared to TQC (except on the Disney robot env where TQC tend to work better).\nEn Vrac - Other Things I Tried penalty to be away from action bounds (hard to tune) action space schedule (start with small action space, make it bigger over time, tricky to schedule and didn\u0026rsquo;t improve performance) linear schedule (learning_rate = LinearSchedule(start=5e-4, end=1e-5, end_fraction=0.15)), it helped for convergence when using n_steps=1 and use_sde=False, but was not needed at the end Appendix: SB3 PPO (PyTorch) vs. SBX PPO (Jax) - A Small Change in the Code, a Big Change in Performance Learning curves for SB3 PPO and SBX PPO before and after the fix. SB3 PPO is the blue line. SBX PPO before is the yellow line, and SBX PPO after the fix is the grey line.\nWhile writing this blog post, I regularly compared SAC to PPO. I have two implementations of PPO: SB3 PPO in PyTorch and SBX PPO in JAX. While comparing, I noticed two things. First, SBX PPO did not learn anything when observation normalization was turned off, whereas SB3 PPO did. Second, the dynamics of the standard deviation (its evolution over time) of the Gaussian distribution were different.\nI investigated where the difference came from. SBX and SB3 share quite a bit of code, so I was surprised by such a significant difference. My main suspects were Jax vs. PyTorch because the Adam implementation and network initialization are different. I tried to use the same initialization for the weights and the same optimizer parameters, but I couldn\u0026rsquo;t get similar behavior at that time.\nTo dig deeper, I checked the statistics of the collected data to understand why the standard deviation was growing with the SBX implementation (instead of decreasing). I noticed something odd. The mean of the actions was not zero at the very beginning of training, and the standard deviation of the actions was much larger than expected (I was expecting std around 1.0, but got std=3.0 for instance). I realized that this was due to the last layer initialization, which was not producing actions close to zero at the beginning of training. Fixing this initialization problem solved my original issue (and the std of the actions during exploration): I could get similar performance with SB3 PPO and SBX PPO.\nCitation @article{raffin2025isaacsim, title = \u0026quot;Getting SAC to Work on a Massive Parallel Simulator: An RL Journey With Off-Policy Algorithms\u0026quot;, author = \u0026quot;Raffin, Antonin\u0026quot;, journal = \u0026quot;araffin.github.io\u0026quot;, year = \u0026quot;2025\u0026quot;, month = \u0026quot;Feb\u0026quot;, url = \u0026quot;https://araffin.github.io/post/sac-massive-sim/\u0026quot; } Acknowledgement I would like to thank Anssi, Leon, Ria and Costa for their feedback =).\nDid you find this post helpful? Consider sharing it 🙌 Footnotes I present the ones that didn\u0026rsquo;t work and could use help (open-problems) at the end of this post.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nI repeat the same process for any new environment where those boundaries would not work (taking sometime the 0.5 and 99.5 percentiles to have a larger space).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHere, I only optimized for the Unitree A1 flat task due to limited computation power. It would be interesting to tune SAC directly for the \u0026ldquo;Rough\u0026rdquo; variant, including n_steps and gSDE train frequency as hyperparameters.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe results are plotted for only three independent runs (random seeds). This is usually insufficient for RL due to the stochasticity of the results. However, in this case, the results tend to be consistent between runs (limited variability). I observed this during the many runs I did while debugging (and writting this blog post), so the trend is likely correct, even with a limited number of seeds. I only have one machine to run the tests, but I will try to run more tests in the coming weeks and update the plots.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nI updated the limits for each family of robots. The PPO percentiles technique worked nicely.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n$\\mu_\\theta(s_t)$ is the actor network output, it represents the mean of the Gaussian distribution.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAlthough there is still a slight performance gap between SAC and PPO, after reading the FastTD3 paper and conducting my own experiments, I believe that the environment rewards were tuned for PPO to encourage a desired behavior. In other words, I suspect that the weighting of the reward terms was adjusted for PPO. To achieve similar performance, SAC probably needs different weights.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nI\u0026rsquo;m plotting the current state of the terrain curriculum (the higher the number, the harder the task/terrain) as the reward magnitude doesn\u0026rsquo;t tell the whole story for the \u0026ldquo;Rough\u0026rdquo; task.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1751328000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1751328000,"objectID":"a4c8e14128a417af58edb88a5ba5064c","permalink":"/post/tune-sac-isaac-sim/","publishdate":"2025-07-01T00:00:00Z","relpermalink":"/post/tune-sac-isaac-sim/","section":"post","summary":"This second post details how I tuned the Soft-Actor Critic (SAC) algorithm to learn as fast as PPO in the context of a massively parallel simulator (thousands of robots simulated in parallel).","tags":null,"title":"Getting SAC to Work on a Massive Parallel Simulator: Tuning for Speed (Part II)","type":"post"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1747825200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1747825200,"objectID":"47ea94417c8e3cf0bb7f8787d0c573fe","permalink":"/talk/recent-advances-rl-cern/","publishdate":"2025-01-01T00:08:00Z","relpermalink":"/talk/recent-advances-rl-cern/","section":"talk","summary":"A presentation on recent advances in RL, in terms of algorithms, software, and simulators.","tags":["Reinforcement Learning"],"title":"Recent Advances in RL for Continuous Control","type":"talk"},{"authors":null,"categories":null,"content":"This is the second (and last) post on automatic hyperparameter optimization. In the first part, I introduced the challenges and main components of hyperparameter tuning (samplers, pruners, objective function, \u0026hellip;). This second part is about the practical application of this technique with the Optuna library, in a reinforcement learning setting (using the Stable-Baselines3 (SB3) library).\nCode: https://gist.github.com/araffin/d16e77aa88ffc246856f4452ab8a2524\nNote: if you prefer to learn with video, I gave this tutorial at ICRA 2022. The slides, notebooks and videos are online:\nPPO on Pendulum-v1 - When default hyperparameters don\u0026rsquo;t work To make this post more concrete, let\u0026rsquo;s take a simple example where the default hyperparameters don\u0026rsquo;t work. In the Pendulum-v1 environment, the RL agent controls a pendulum that \u0026ldquo;starts in a random position, and the goal is to swing it up so it stays upright\u0026rdquo;.\nTrained SAC agent on the Pendulum-v1 environment. The agent receives the state of the pendulum as input (cos and sine of the angle $\\theta$ and angular velocity $\\dot{\\theta}$) and outputs the desired torque (1D). The agent is rewarded for keeping the pendulum upright ($\\theta = 0$ and $\\dot{\\theta} = 0$) and penalized for using high torques. An episode ends after a timeout of 200 steps ( truncation).\nIf you try to run the Proximal Policy Optimization (PPO) algorithm on the Pendulum-v1 environment, with a budget of 100,000 timesteps (SAC can solve this task in only 5,000 steps), it will not converge1. With the default hyperparameters, you will get an average return of about -1000, far from the best performance you can get, which is around -200:\nfrom stable_baselines3 import PPO # Faster, with Jax: from sbx import PPO # Default hyperparameters don't work well PPO(\u0026quot;MlpPolicy\u0026quot;, \u0026quot;Pendulum-v1\u0026quot;, verbose=1).learn(100_000, progress_bar=True) Defining the Search Space The first thing to define when optimizing hyperparameters is the search space: what parameters to optimize and what range to explore? You need also to decide from which distribution to sample from. For example, in the case of continuous variables (like the discount factor $\\gamma$ or the learning rate $\\alpha$), values can be sampled from a uniform or log-uniform distribution.\nSampling methods In practice, Optuna provides several trial.suggest_... methods to define which parameter to optimize with which distribution. For instance, to sample the discount factor $\\gamma$ uniformly from the range $[0, 1]$, you would use gamma = trial.suggest_float(\u0026quot;gamma\u0026quot;, 0.0, 1.0).\nI recommend reading the Optuna documentation to have a better understanding of the library and its features. In the meantime, you need to know about some other useful methods for sampling hyperparameters:\ntrial.suggest_float(..., log=True) to sample from a log-uniform distribution (ex: learning rate) trial.suggest_int(\u0026quot;name\u0026quot;, low, high) to sample integers (ex: mini-batch size), low and high are included trial.suggest_categorical(\u0026quot;name\u0026quot;, choices) for sampling from a list of choices (ex: choosing an activation function) Back to the PPO example on the Pendulum-v1 task, what hyperparameters can be optimized and what range should be explored for each of them?\nPPO hyperparameters PPO has many hyperparameters, but to keep the search small (and this blog post short), I will limit the search to four parameters: the learning rate $\\alpha$, the discount factor $\\gamma$, the activation function of the neural networks and the number of steps for data collection (n_steps).\nTuning the learning rate $\\alpha$ is crucial for fast but stable training. If $\\alpha$ is too big, the training tends to be unstable and usually leads to NaNs (or other numerical instability). If it is too small, it will take forever to converge.\nSince the learning rate $\\alpha$ is a continuous variable (it is a float) and distinguishing between small learning rates is important, it is recommended to use a log-uniform distribution for sampling. To search around the default learning rate $\\alpha_0 = 3e^{-4}$, I define the search space to be in $[\\alpha_0 / 10, 10 \\alpha_0] = [3e^{-5}, 3e^{-3}]$. This translates to learning_rate = trial.suggest_float(\u0026quot;learning_rate\u0026quot;, 3e-5, 3e-3, log=True) with Optuna.\nThe discount factor $\\gamma$ represents a trade-off between optimizing short-term rewards and long-term rewards. In general, we want to maximize the sum of undiscounted rewards ($\\gamma = 1$), but in practice $\\gamma \u0026lt; 1$ works best (while keeping $\\gamma \\approx 1$). A recommended range for the discount factor $\\gamma$ is $[0.97, 0.9999]$2 (default is 0.99), or in Python: gamma = trial.suggest_float(\u0026quot;gamma\u0026quot;, 0.97, 0.9999).\nI\u0026rsquo;m considering two activation functions in this example: Tanh and ReLU. Because the activation function is sampled from a list of options, activation_fn = trial.suggest_categorical(\u0026quot;activation_fn\u0026quot;, [\u0026quot;tanh\u0026quot;, \u0026quot;relu\u0026quot;]) is the corresponding code3.\nFinally, PPO has a n_steps parameter that controls the \u0026ldquo;number of steps to run for each environment per update\u0026rdquo;. That is to say, PPO updates its policy every n_steps * n_envs steps (and collect n_steps * n_envs transitions to sample from). This hyperparameter also affects the value and advantage estimation (larger n_steps leads to less biased estimates). It is recommended to use a power of two for its value4, i.e., we sample the exponent instead of the value directly, which translates to n_steps_pow = trial.suggest_int(\u0026quot;n_steps_pow\u0026quot;, 5, 12) (from $2^5=32$ to $2^{12}=4096$).\nTo summarize, this is the overall sampling function:\nfrom typing import Any import optuna def sample_ppo_params(trial: optuna.Trial) -\u0026gt; dict[str, Any]: \u0026quot;\u0026quot;\u0026quot;Sampler for PPO hyperparameters.\u0026quot;\u0026quot;\u0026quot; # From 2**5=32 to 2**12=4096 n_steps_pow = trial.suggest_int(\u0026quot;n_steps_pow\u0026quot;, 5, 12) gamma = trial.suggest_float(\u0026quot;one_minus_gamma\u0026quot;, 0.97, 0.9999) learning_rate = trial.suggest_float(\u0026quot;learning_rate\u0026quot;, 3e-5, 3e-3, log=True) activation_fn = trial.suggest_categorical(\u0026quot;activation_fn\u0026quot;, [\u0026quot;tanh\u0026quot;, \u0026quot;relu\u0026quot;]) # Convert power of two to number of steps n_steps = 2**n_steps_pow # Display true values trial.set_user_attr(\u0026quot;n_steps\u0026quot;, n_steps) # Convert to PyTorch objects activation_fn = {\u0026quot;tanh\u0026quot;: nn.Tanh, \u0026quot;relu\u0026quot;: nn.ReLU}[activation_fn] return { \u0026quot;n_steps\u0026quot;: n_steps, \u0026quot;gamma\u0026quot;: gamma, \u0026quot;learning_rate\u0026quot;: learning_rate, \u0026quot;policy_kwargs\u0026quot;: { \u0026quot;activation_fn\u0026quot;: activation_fn, }, } Defining the Objective Function After choosing the search space, you need to define the objective function. In reinforcement learning, we usually want to get the best performance for a given budget (either in terms of samples or training time), i.e., we try to maximize the episodic reward.\nOne way to measure the performance is to periodically evaluate the agent on a test environment for multiple episodes:\nfrom stable_baselines3.common.evaluation import evaluate_policy # model = PPO(\u0026quot;MlpPolicy\u0026quot;, \u0026quot;Pendulum-v1\u0026quot;) # eval_env = gym.make(\u0026quot;Pendulum-v1\u0026quot;) # Note: by default, evaluate_policy uses the deterministic policy mean_return, std_return = evaluate_policy(model, eval_env, n_eval_episodes=20) In practice, with SB3, I use a custom callback to trigger evaluations at different stages of training:\nfrom stable_baselines3.common.callbacks import BaseCallback class TrialEvalCallback(BaseCallback): \u0026quot;\u0026quot;\u0026quot;Callback used for evaluating and reporting a trial.\u0026quot;\u0026quot;\u0026quot; def _on_step(self) -\u0026gt; bool: if self.eval_freq \u0026gt; 0 and self.n_calls % self.eval_freq == 0: # Evaluate the current policy every n_calls mean_return, _ = evaluate_policy(self.model, self.eval_env) self.eval_idx += 1 # Send report to Optuna self.trial.report(mean_return, self.eval_idx) # Prune (stop training) trial if needed if self.trial.should_prune(): self.is_pruned = True return False return True This callback also allows to stop training early if a trial is too bad and should be pruned (by checking the value of trial.should_prune()).\nThe full objective method contains additional code to create the training environment, sample the hyperparameters, instantiate the RL agent and train it:\nfrom stable_baselines3.common.env_util import make_vec_env N_ENVS = 5 N_TIMESTEPS = 40_000 # Evaluate every 20_000 steps # each vec_env.step() is N_ENVS steps EVAl_FREQ = 20_000 // N_ENVS def objective(trial: optuna.Trial) -\u0026gt; float: # Create train and eval envs, # I use multiple envs in parallel for faster training vec_env = make_vec_env(\u0026quot;Pendulum-v1\u0026quot;, n_envs=N_ENVS) eval_env = make_vec_env(\u0026quot;Pendulum-v1\u0026quot;, n_envs=N_ENVS) # Sample hyperparameters. and create the RL model model = PPO(\u0026quot;MlpPolicy\u0026quot;, vec_env, **sample_ppo_params(trial)) # Create the callback that will periodically evaluate and report the performance. eval_callback = TrialEvalCallback( eval_env, trial, n_eval_episodes=20, eval_freq=EVAl_FREQ, ) # Train the RL agent model.learn(N_TIMESTEPS, callback=eval_callback) if eval_callback.is_pruned: raise optuna.exceptions.TrialPruned() # Report final performance return eval_callback.last_mean_reward Choosing Sampler and Pruner Finally, after defining the search space and the objective function, you have to choose a sampler and (optionally) a pruner (see part one). If you don\u0026rsquo;t know what to choose, Optuna now has an AutoSampler which choosees a recommended sampler for you (between TPESampler, GPSampler and CmaEsSampler), based on heuristics.\nHere, I selected TPESampler and MedianPruner because they tend to be good default choices. Don\u0026rsquo;t forget to pass n_startup_trials to both to warm up the optimization with a RandomSampler (uniform sampler) and to avoid premature convergence (like pruning potentially good trials too early):\nfrom optuna.pruners import MedianPruner from optuna.samplers import TPESampler, RandomSampler # Select the sampler, can be random, TPESampler, CMAES, ... sampler = TPESampler(n_startup_trials=5) # Do not prune before 1/3 of the max budget is used pruner = MedianPruner(n_startup_trials=5, n_warmup_steps=N_EVALUATIONS // 3) # Create the study and start the hyperparameter optimization study = optuna.create_study(sampler=sampler, pruner=pruner, direction=\u0026quot;maximize\u0026quot;) # This script can be launch in parallel when using a database # We pass the objective function defined previously study.optimize(objective, n_trials=N_TRIALS, timeout=TIMEOUT) # Best result best_trial = study.best_trial Et voilà! That\u0026rsquo;s all you need to run automatic hyperparameter optimization. If you now run the final script for five minutes, it should quickly find hyperparameters that give good results.\nFor example, in one of the runs I did, I was able to get in just two minutes:\nNumber of finished trials: 21 Best trial: Value: -198.01224440000001 Params: n_steps_pow: 8 gamma: 0.9707141699579157 learning_rate: 0.0014974865679170315 activation_fn: relu User attrs: n_steps: 256 To verify that these hyperparameters actually work (more on that soon), you can use:\nfrom stable_baselines3 import PPO from stable_baselines3.common.env_util import make_vec_env import torch as th vec_env = make_vec_env(\u0026quot;Pendulum-v1\u0026quot;, n_envs=5) # Using optimized hyperparameters policy_kwargs = dict(activation_fn=th.nn.ReLU) hyperparams = dict(n_steps=256, gamma=0.97, learning_rate=1.5e-3) model = PPO(\u0026quot;MlpPolicy\u0026quot;, vec_env, verbose=1, **hyperparams) model.learn(40_000, progress_bar=False) It should give you better results than the default hyperparameters with half of the training budget.\nLearning curve for PPO with default and tuned hyperparameters\nNote: I recommend using the RL Zoo for more complex settings. It includes automatic hyperparameter tuning, loading trial and distributed optimization. Example command to optimize PPO on the Pendulum-v1 environment:\npython -m rl_zoo3.train --algo ppo --env Pendulum-v1 -optimize --storage ./demo.log --study-name demo Distributed Optimization A simple way to speed up the optimization process is to run multiple trials in parallel. To do this, you need to use a database and pass it to Optuna\u0026rsquo;s create_study() method.\nThe easiest way to distribute tuning is to use a log file for storage and start the same script in multiple terminals (and potentially on multiple machines):\nstorage_file = \u0026quot;./my_studies.log\u0026quot; study_name = \u0026quot;ppo-Pendulum-v1_1\u0026quot; storage = optuna.storages.JournalStorage( optuna.storages.journal.JournalFileBackend(storage_file), ) study = optuna.create_study( ... storage=storage, study_name=study_name, load_if_exists=True, ) If you use a database (you should), you can also use Optuna dashboard to monitor the optimization progress.\nOptuna dashboard demo\nTips and Tricks Before concluding this blog post, I would like to give you some tips and tricks to keep in mind when doing hyperparameter tuning.\nStart simple First, as with any RL problem, starting simple is the key to success. Do not try to optimize too many hyperparameters at once, using large ranges. My advice would be to start with a minimal number of parameters (i.e., start with a small search space) and increase their number and ranges only as needed.\nFor example, to decide whether to increase or decrease the search range, you can look at the best trials so far. If the best trials are close to the limits of the search space (saturation), this is a sign that you should increase the limits. On the other hand, if above a certain threshold for a parameter, all trials are bad, you can probably reduce the search space.\nAnother thing to keep in mind is that most of the time, you don\u0026rsquo;t need automatic tuning. Simply training for a longer time (i.e., using a larger training budget) can improve the results without changing the hyperparameters.\nPost-Evaluation to Remove Noise Last but not least (and perhaps the most important tip), do not forget that RL training is a stochastic process. This means that the performance reported for each trial can be noisy: if you run the same trial but with a different random seed, you might get different results.\nI tend to approach this problem in two ways.\nTo filter out the evaluation noise, I usually re-evaluate the top trials multiple times to find out which ones were \u0026ldquo;lucky seeds\u0026rdquo; and which ones work consistently. Another way to deal with this problem is to do multiple runs per trial: each run uses the same hyperparameters but starts with a different random seed. However, this technique is expensive in terms of computation time and makes it difficult to prune out bad trials early.\nConclusion In this second part, I went through the process of doing automatic hyperparameter tuning in practice, using the Optuna library. I\u0026rsquo;ve covered:\ndefining the search space and the objective function choosing a sampler and a pruner speeding up the tuning process with distributed optimization tips and tricks to keep in mind when doing automatic hyperparameter tuning As a conclusion and transition to the next blog post, I will use this technique to tune SAC for fast training when using a massively parallel environment like Isaac Sim.\nPS: In case you missed it, you can find the final script here: https://gist.github.com/araffin/d16e77aa88ffc246856f4452ab8a2524\nAppendix - The Optuna Library Among the various open-source libraries for hyperparameter optimization (such as hyperopt or Ax), I chose Optuna for multitple reasons:\nit has a clean API and good documentation it supports many samplers and pruners it has some nice additional features (like easy distributed optimization support, multi-objective support or the optuna-dashboard) Citation @article{raffin2025optuna, title = \u0026quot;Automatic Hyperparameter Tuning - In Practice\u0026quot;, author = \u0026quot;Raffin, Antonin\u0026quot;, journal = \u0026quot;araffin.github.io\u0026quot;, year = \u0026quot;2025\u0026quot;, month = \u0026quot;April\u0026quot;, url = \u0026quot;https://araffin.github.io/post/optuna/\u0026quot; } Acknowledgement I would like to thank Anssi and Costa for their feedback =).\nDid you find this post helpful? Consider sharing it 🙌 Footnotes Without proper truncation handling, PPO will actually not converge even in 1 million steps with default hyperparameters.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nA common way to define the param range is to start small and later increase the search space if the best parameters found are at the boundary of the defined range.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nI convert strings to PyTorch objects later because options need to be serializable to be stored by Optuna.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nOne of the main reasons for choosing a power of two is that the GPU kernel/hardware is optimized for power of two operations. Also, in practice, n_steps=4096 vs. n_steps=4000 doesn\u0026rsquo;t make much difference, so using a power of two reduces the search space.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1745366400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1745366400,"objectID":"8699823622663de32792d2cf264e5c35","permalink":"/post/optuna/","publishdate":"2025-04-23T00:00:00Z","relpermalink":"/post/optuna/","section":"post","summary":"This is the second (and last) post on automatic hyperparameter optimization. In the first part, I introduced the challenges and main components of hyperparameter tuning (samplers, pruners, objective function, \u0026hellip;). This second part is about the practical application of this technique with the Optuna library, in a reinforcement learning setting (using the Stable-Baselines3 (SB3) library).","tags":null,"title":"Automatic Hyperparameter Tuning - In Practice (Part 2)","type":"post"},{"authors":null,"categories":null,"content":"This post details how I managed to get the Soft-Actor Critic (SAC) and other off-policy reinforcement learning algorithms to work on massively parallel simulators (think Isaac Sim with thousands of robots simulated in parallel). If you follow the journey, you will learn about overlooked details in task design and algorithm implementation that can have a big impact on performance.\nSpoiler alert: quite a few papers/code are affected by the problem described below.\nPart I is about identifying the problem and trying out quick fixes on SAC. Part II is about tuning SAC for speed and making it work as good as PPO. A Suspicious Trend: PPO, PPO, PPO, \u0026hellip; The story begins a few months ago when I saw another paper using the same recipe for learning locomotion: train a PPO agent in simulation using thousands of environments in parallel and domain randomization, then deploy it on the real robot. This recipe has become the standard since 2021, when ETH Zurich and NVIDIA1 showed that it was possible to learn locomotion in minutes on a single workstation. The codebase and the simulator (called Isaac Gym at that time) that were published became the basis for much follow-up work2.\nAs an RL researcher focused on learning directly on real robots, I was curious and suspicious about one aspect of this trend: why is no one trying an algorithm other than PPO?3 PPO benefits from fast and parallel environments4, but PPO is not the only deep reinforcement learning (DRL) algorithm for continuous control tasks and there are alternatives like SAC or TQC that can lead to better performance5.\nSo I decided to investigate why these off-policy algorithms are not used by practitioners, and maybe why they don\u0026rsquo;t work with massively parallel simulators.\nWhy It Matters? - Fine Tuning on Real Robots If we could make SAC work with these simulators, then it would be possible to train in simulation and fine-tune on the real robot using the same algorithm (PPO is too sample-inefficient to train on a single robot) .\nBy using other algorithms it might also be possible to get better performance. Finally, it is always good to have a better understanding of what works or not and why. As researchers, we tend to publish only positive results, but I think a lot of valuable insights are lost in our unpublished failures.\nThe DLR bert elastic quadruped\n(The Path of Least Resistance) Hypothesis Before digging any further, I had some hypotheses as to why PPO was the only algorithm used:\nPPO is fast to train (in terms of computation time) and was tuned for the massively parallel environment. As researchers, we tend to take the path of least resistance and build on proven solutions (the original training code is open source and the simulator is freely available) to get new interesting results6. There may be some peculiarities in the environment design that favor PPO over other algorithms. In other words, the massively parallel environments might be optimized for PPO. SAC/TQC and derivatives are tuned for sample efficiency, not fast wall clock time. In the case of massively parallel simulation, what matters is how long it takes to train, not how many samples are used. They probably need to be tuned/adjusted for this new setting. Note: during my journey, I will (obviously) be using Stable-Baselines3 and its fast Jax version SBX.\nThe Hunt Begins There are now many massively parallel simulators available (Isaac Sim, Brax, MJX, Genesis, \u0026hellip;), here, I chose to focus on Isaac Sim because it was one of the first and is probably the most influential one.\nAs with any RL problem, starting simple is the key to success.\nA PPO agent trained on the Isaac-Velocity-Flat-Unitree-A1-v0 locomotion task. Green arrow is the desired velocity, blue arrow represents the current velocity Therefore, I decided to focus on the Isaac-Velocity-Flat-Unitree-A1-v0 locomotion task first, because it is simple but representative. The goal is to learn a policy that can move the Unitree A1 quadruped in any direction on a flat ground, following a commanded velocity (the same way you would control a robot with a joystick). The agent receives information about its current task as input (joint positions, velocities, desired velocity, \u0026hellip;) and outputs desired joint positions (12D vector, 3 joints per leg). The robot is rewarded for following the correct desired velocity (linear and angular) and for other secondary tasks (feet air time, smooth control, \u0026hellip;). An episode ends when the robot falls over and is timed out ( truncation) after 1000 steps7.\nAfter some quick optimizations (SB3 now runs 4x faster, at 60 000 fps for 2048 envs with PPO), I did some sanity checks. First, I ran PPO with the tuned hyperparameters found in the repository, and it was able to quickly solve the task. In 5 minutes, it gets an average episode return of ~30 (above an episode return of 15, the task is almost solved). Then I tried SAC and TQC, with default hyperparameters (and observation normalization), and, as expected, it didn\u0026rsquo;t work. No matter how long it was training, there was no sign of improvement.\nLooking at the simulation GUI, something struck me: the robots were making very large random movements. Something was wrong.\nSAC out of the box on Isaac Sim during training.\nBecause of the very large movements, my suspicion was towards what action the robot is allowed to do. Looking at the code, the RL agent commands a (scaled) delta with respect to a default joint position:\n# Note desired_joint_pos is of dimension 12 (3 joints per leg) desired_joint_pos = default_joint_pos + scale * action Then, let\u0026rsquo;s look at the action space itself (I\u0026rsquo;m using ipdb to have an interactive debugger):\nimport ipdb; ipdb.set_trace() \u0026gt;\u0026gt; vec_env.action_space Box(-100.0, 100.0, (12,), float32) Ah ah! The action space defines continuous actions of dimension 12 (nothing wrong here), but the limits $[-100, 100]$ are surprisingly large, e.g., it allows a delta of +/- 1432 deg!! in joint angle when scale=0.25, like for the Unitree A1 robot. To understand why normalizing the action space matters (usually a bounded space in $[-1, 1]$), we need to dig deeper into how PPO works.\nPPO Gaussian Distribution Like many RL algorithms, PPO relies on a probability distribution to select actions. During training, at each timestep, it samples an action $a_t \\sim N(\\mu_\\theta(s_t), \\sigma^2)$ from a Gaussian distribution in the case of continuous actions8. The mean of the Gaussian $\\mu_\\theta(s_t)$ is the output of the actor neural network (with parameters $\\theta$) and the standard deviation is a learnable parameter $\\sigma$, usually initialized with $\\sigma_0 = 1.0$.\nThis means that at the beginning of training, most of the sampled actions will be in $[-3, 3]$ (from the Three Sigma Rule):\nThe initial Gaussian distribution used by PPO for sampling actions.\nBack to our original topic, because of the way $\\sigma$ is initialized, if the action space has large bounds (upper/lower bounds \u0026raquo; 1), PPO will almost never sample actions near the limits. In practice, the actions taken by PPO will even be far away from them. Now, let\u0026rsquo;s compare the initial PPO action distribution with the Unitree A1 action space:\nThe same initial Gaussian distribution but with the perspective of the Unitree A1 action space $[-100, 100]$\nFor reference, we can plot the action distribution of PPO after training9:\nDistribution of actions for PPO after training (on 64 000 steps).\nThe min/max values per dimension:\n\u0026gt;\u0026gt; actions.min(axis=0) array([-3.6, -2.5, -3.1, -1.8, -4.5, -4.2, -4. , -3.9, -2.8, -2.8, -2.9, -2.7]) \u0026gt;\u0026gt; actions.max(axis=0) array([ 3.2, 2.8, 2.7, 2.8, 2.9, 2.7, 3.2, 2.9, 7.2, 5.7, 5. , 5.8]) Again, most of the actions are centered around zero (which makes sense, since it corresponds to the quadruped initial position, which is usually chosen to be stable), and there are almost no actions outside $[-5, 5]$ (less than 0.1%): PPO uses less than 5% of the action space!\nNow that we know that we need less than 5% of the action space to solve the task, let\u0026rsquo;s see why this might explain why SAC doesn\u0026rsquo;t work in this case10.\nSAC Squashed Gaussian SAC and other off-policy algorithms for continuous actions (such as DDPG, TD3 or TQC) have an additional transformation at the end of the actor network. In SAC, actions are sampled from an unbounded Gaussian distribution and then passed through a $tanh()$ function to squash them to the range $[-1, 1]$. SAC then linearly rescales the sampled action to match the action space definition, i.e. it transforms the action from $[-1, 1]$ to $[\\text{low}, \\text{high}]$11.\nWhat does this mean? Assuming we start with a standard deviation similar to PPO, this is what the sampled action distribution looks like after squashing12:\nThe equivalent initial squashed Gaussian distribution.\nAnd after rescaling to the environment limits (with PPO distribution to put it in perspective):\nThe same initial squashed Gaussian distribution but rescaled to the Unitree A1 action space $[-100, 100]$\nAs you can see, these are two completely different initial distributions at the beginning of training! The fact that the actions are rescaled to fit the action space boundaries explains the very large movements seen during training, and also explains why it was impossible for SAC to learn anything useful.\nQuick Fix When I discovered that the action limits were way too large, my first reflex was to re-train SAC, but with only 3% of the action space, to more or less match the effective action space of PPO. Although it didn\u0026rsquo;t reach PPO performance, there was finally some sign of life (an average episodic return slightly positive after a while).\nWhat I tried next was to use a neural network similar to the one used by PPO for this task and reduce SAC exploration by having a smaller entropy coefficient13 at the beginning of training. Bingo! SAC finally learned to solve the task!\nLearning curve on the Unitree A1 task using 1024 envs.\nTrained SAC agent after the quick fix.\nSAC Hyperparameters (the ones not specified are SB3 defaults):\nsac_hyperparams = dict( policy_kwargs={ # Similar to PPO network tuned for Unitree A1 task \u0026quot;activation_fn\u0026quot;: jax.nn.elu, \u0026quot;net_arch\u0026quot;: [512, 256, 128], }, # When using 2048 envs, gradient_steps=512 corresponds # to an update-to-data ratio of 1/4 gradient_steps=512, ent_coef=\u0026quot;auto_0.006\u0026quot;, ) That\u0026rsquo;s all folks? Although SAC can now solve this locomotion task, it takes more time to train, is not consistent, and the performance is slightly below PPO\u0026rsquo;s. In addition, SAC\u0026rsquo;s learned gaits are not as pleasing as PPO\u0026rsquo;s, for example, SAC agents tend to keep one leg up in the air\u0026hellip;\nPart II explores these aspects (and more environments), review SAC design decisions (for example, try to remove the squashed Gaussian), and tune it for speed, but for now let\u0026rsquo;s see what this means for the RL community.\nOutro: What Does That Mean for the RL Community? When I found out about this problem, I was curious to see how widespread it was in the community. After a quick search, it turns out that there are a lot of papers/code affected14 by this large boundary problem (see a non-exhaustive list of affected papers/code below).\nAlthough the initial choice of bounds may be a conscious and convenient one (no need to specify the real bounds, PPO will figure it out), it seems to have worked a bit by accident for those who built on top of it, and probably discouraged practitioners from trying other algorithms.\nMy recommendation would be to always have properly defined action bounds, and if they are not known in advance, you can always plot the action distribution and adjust the limits when iterating on the environment design.\nAppendix - Affected Papers/Code Please find here a non-exhaustive list of papers/code affected by the large bound problem:\nIsaacLab Learning to Walk in Minutes One Policy to Run Them All Genesis env ASAP Humanoid Agile But Robust Rapid Locomotion Deep Whole Body Control Robot Parkour Learning You can probably find many more looking at works that cite the ETH paper.\nSeems to be fixed in Extreme Parkour (clip action 1.2) Almost fixed in Walk this way (clip action 10) Appendix - Note on Unbounded Action Spaces While discussing this blog post with Nico Bohlinger, he raised another point that could explain why people might choose unbounded action space.\nIn short, policies can learn to produce actions outside the joint limits to trick the underlying PD controller into outputting desired torques. For example, when recovering from a strong push, what matters is not to accurately track a desired position, but to quickly move the joints in the right direction. This makes training almost invariant to the chosen PD gains.\nFull quote So in theory you could clip [the actor output] to the min and max ranges of the joints, but what happens quite often is that these policies learn to produce actions that sets the target joint position outside of the joint limits. This happens because the policies don\u0026rsquo;t care about the tracking accuracy of the underlying PD controller, they just want to command: in which direction should the joint angle change, and by how much.\nIn control, the magnitude is done through the P and D gains, but we fix them during training, so when the policy wants to move the joints in a certain direction very quickly (especially needed during recovery of strong pushes or strong domain randomization in general), it learns to command actions that are far away to move into this direction quickly, i.e. to produce more torque.\nIt essentially learns to trick the PD control to output whatever torques it needs. Of course, this also depends on the PD gains you set; if they are well chosen, actions outside of the joint limits are less frequent. A big benefit is that this makes the whole training pipeline quite invariant to the PD gains you choose at the start, which makes tuning easier.\nCitation @article{raffin2025isaacsim, title = \u0026quot;Getting SAC to Work on a Massive Parallel Simulator: An RL Journey With Off-Policy Algorithms\u0026quot;, author = \u0026quot;Raffin, Antonin\u0026quot;, journal = \u0026quot;araffin.github.io\u0026quot;, year = \u0026quot;2025\u0026quot;, month = \u0026quot;Feb\u0026quot;, url = \u0026quot;https://araffin.github.io/post/sac-massive-sim/\u0026quot; } Acknowledgement I would like to thank Anssi, Leon, Ria and Costa for their feedback =).\nDid you find this post helpful? Consider sharing it 🙌 Footnotes Rudin, Nikita, et al. \u0026ldquo;Learning to walk in minutes using massively parallel deep reinforcement learning.\u0026rdquo; Conference on Robot Learning. PMLR, 2022.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLike the BD-1 Disney robot\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nI was not the only one asking why SAC doesn\u0026rsquo;t work: nvidia forum reddit1 reddit2\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBerner C, Brockman G, Chan B, Cheung V, Dębiak P, Dennison C, Farhi D, Fischer Q, Hashme S, Hesse C, Józefowicz R. Dota 2 with large scale deep reinforcement learning. arXiv preprint arXiv:1912.06680. 2019 Dec 13.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee results from Huang, Shengyi, et al. \u0026ldquo; Open rl benchmark: Comprehensive tracked experiments for reinforcement learning.\u0026rdquo; arXiv preprint arXiv:2402.03046 (2024).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nYes, we tend to be lazy.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe control loop runs at 50 Hz, so after 20s.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThis is not true for the PPO implementation in Brax which uses a squashed Gaussian like SAC.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe code to record and plot action distribution is on GitHub\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAction spaces that are too small are also problematic. See SB3 RL Tips and Tricks.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRescale from [-1, 1] to [low, high] using action = low + (0.5 * (scaled_action + 1.0) * (high - low)).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCommon PPO implementations clip the actions to fit the desired boundaries, which has the effect of oversampling actions at the boundaries when the limits are smaller than ~4.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe entropy coeff is the coeff that does the trade-off between RL objective and entropy maximization.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nA notable exception are Brax-based environments because their PPO implementation uses a squashed Gaussian, so the boundaries of the environments had to be properly defined.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1739145600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1739145600,"objectID":"1a1ba5c9bbd8322bc8c7eb6e3f321c5a","permalink":"/post/sac-massive-sim/","publishdate":"2025-02-10T00:00:00Z","relpermalink":"/post/sac-massive-sim/","section":"post","summary":"This post details how I managed to get the Soft-Actor Critic (SAC) and other off-policy reinforcement learning algorithms to work on massively parallel simulators (think Isaac Sim with thousands of robots simulated in parallel).","tags":null,"title":"Getting SAC to Work on a Massive Parallel Simulator: An RL Journey With Off-Policy Algorithms (Part I)","type":"post"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1738330200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1738330200,"objectID":"02ba69cb8ccceec73cfceef11cbbcd47","permalink":"/talk/phd-defense-inria/","publishdate":"2025-01-01T00:08:00Z","relpermalink":"/talk/phd-defense-inria/","section":"talk","summary":"Invited talk while visiting the INRIA Willow team in Paris.","tags":["Reinforcement Learning"],"title":"Enabling Reinforcement Learning on Real Robots","type":"talk"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1732282200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732282200,"objectID":"51b52d0ee23cc5d5ae15f7d6dde2b7dc","permalink":"/talk/ingredients-learning-loco/","publishdate":"2022-01-01T00:08:00Z","relpermalink":"/talk/ingredients-learning-loco/","section":"talk","summary":"Invited talk for the Soccer Robots workshop at Humanoids conference 2024","tags":["Reinforcement Learning"],"title":"Ingredients for Learning Locomotion Directly on Real Hardware","type":"talk"},{"authors":["Antonin Raffin"],"categories":null,"content":"This talk was also given at the RL Symposium organized by Boston University on May 10, 2024.\n","date":1707121800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1707121800,"objectID":"753a9772b7dc0ff26ed5b5b07ae37e61","permalink":"/talk/design-real-rl-exp/","publishdate":"2022-01-01T00:08:00Z","relpermalink":"/talk/design-real-rl-exp/","section":"talk","summary":"Talk at the Reinforcement Learning for Autonomous Accelerators workshop (RL4AA). The idea is to walk through the different steps of RL experimentation (task design, choosing the right algorithm, implementing safety layers) and also provide practical advice on how to run experiments and troubleshoot common problems.","tags":["Reinforcement Learning"],"title":"Designing and Running Real-World RL Experiments","type":"talk"},{"authors":["Antonin Raffin"],"categories":null,"content":"This talk was also given at the Industrial RL Workshop organized in Paris Saclay in November 2023.\n","date":1702368000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702368000,"objectID":"ae44c3ea4259c40e30901ff197927e6a","permalink":"/talk/tips-reliable-rl/","publishdate":"2022-01-01T00:08:00Z","relpermalink":"/talk/tips-reliable-rl/","section":"talk","summary":"Talk at the CDC 2023 Workshop on Benchmarking, Reproducibility, and Open-Source Code in Controls, about the lessons learned while developping Stable-Baselines3 to have reliable implementations and reproducible experiments.","tags":["Reinforcement Learning"],"title":"Practical Tips for Reliable Reinforcement Learning","type":"talk"},{"authors":["Antonin Raffin","Olivier Sigaud","Jens Kober","Alin Albu-Schäffer","Joao Silvério","Freek Stulp"],"categories":null,"content":"","date":1696377600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696377600,"objectID":"104f514ffcd2250e0db95efe8cfbbb19","permalink":"/publication/simple-open-loop/","publishdate":"2023-10-04T00:00:00Z","relpermalink":"/publication/simple-open-loop/","section":"publication","summary":"*Outstanding Paper Award on Empirical Resourcefulness in RL* In search of a simple baseline for Deep Reinforcement Learning in locomotion tasks, we propose a model-free open-loop strategy. By leveraging prior knowledge and the elegance of simple oscillators to generate periodic joint motions, it achieves respectable performance in five different locomotion environments, with a number of tunable parameters that is a tiny fraction of the thousands typically required by DRL algorithms. We conduct two additional experiments using open-loop oscillators to identify current shortcomings of these algorithms. Our results show that, compared to the baseline, DRL is more prone to performance degradation when exposed to sensor noise or failure. Furthermore, we demonstrate a successful transfer from simulation to reality using an elastic quadruped, where RL fails without randomization or reward engineering. Overall, the proposed baseline and associated experiments highlight the existing limitations of DRL for robotic applications, provide insights on how to address them, and encourage reflection on the costs of complexity and generality.","tags":["Reinforcement Learning,","Robotics"],"title":"An Open-Loop Baseline for Reinforcement Learning Locomotion Tasks","type":"publication"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1687946400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1687946400,"objectID":"a90482114ee14b10f6248a3a1e63a579","permalink":"/talk/iri-upc-23/","publishdate":"2023-01-01T00:08:00Z","relpermalink":"/talk/iri-upc-23/","section":"talk","summary":"","tags":["Reinforcement Learning"],"title":"Knowledge Guided Reinforcement Learning for Robotics","type":"talk"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1687876200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1687876200,"objectID":"caf087c04a5d6c34cd62874067c7bfbe","permalink":"/talk/rlss-23/","publishdate":"2023-01-01T00:08:00Z","relpermalink":"/talk/rlss-23/","section":"talk","summary":"From tabular Q-learning to Deep Q-Network (DQN)","tags":["Reinforcement Learning"],"title":"DQN Tutorial","type":"talk"},{"authors":null,"categories":null,"content":"When you\u0026rsquo;re building a machine learning model, you want to find the best hyperparameters to make it shine. But who has the luxury of trying out every possible combination?\nThe good news is that automatic hyperparameter tuning can help you. The trick is to allocate your \u0026ldquo;budget\u0026rdquo; (aka time and resources) wisely. You want to try out as many combinations as possible, but you don\u0026rsquo;t have an infinite amount of time. By pruning the bad trials early and focusing on the promising ones, you can find the best hyperparameters quickly and efficiently.\nAs a personal and concrete example, I used this technique on a real elastic quadruped to optimize the parameters of a controller directly on the real robot (it can also be good baseline for locomotion).\nIn this blog post, I\u0026rsquo;ll explore some of the techniques for automatic hyperparameter tuning, using reinforcement learning as a concrete example. I\u0026rsquo;ll discuss the challenges of hyperparameter optimization, and introduce different samplers and schedulers for exploring the hyperparameter space. Part two shows how to use the Optuna library to put these techniques into practice.\nIf you prefer to learn with video, I gave this tutorial at ICRA 2022. The slides, notebooks and videos are online:\nHyperparameter Optimization: The \u0026ldquo;n vs B/n\u0026rdquo; tradeoff When you do hyperparameter tuning, you want to try a bunch of configurations \u0026ldquo;n\u0026rdquo; on a given problem. Depending on how each trial goes, you may decide to continue or stop it early.\nThe tradeoff you have is that you want to try as many configurations (aka sets of hyperparameters) as possible, but you don\u0026rsquo;t have an infinite budget (B). So you have to allocate the budget you give to each configuration wisely (B/n, budget per configuration).\nAs shown in the figure above, one way to achieve this goal is to start by giving all trials the same budget. After some time, say 25% of the total budget, you decide to prune the least promising trials and allocate more resources to the most promising ones.\nYou can repeat this process several times (here at 50% and 75% of the maximum budget) until you reach the budget limit.\nThe two main components of hyperparameter tuning deal with this tradeoff:\nthe sampler (or search algorithm) decides which configuration to try the pruner (or scheduler) decides how to allocate the computational budget and when to stop a trial Samplers So how do you sample configurations, how do you choose which set of parameters to try?\nThe Performance Landscape Let\u0026rsquo;s take a simple 2D example to illustrate the high-level idea.\nIn this example, we want to obtain high returns (red area). The performance depends on two parameters that we can tune.\nOf course, if we knew the performance landscape in advance, we wouldn\u0026rsquo;t need any tuning, we could directly choose the optimal parameters for the task.\nIn this particular example, you can notice that one parameter must be tuned precisely (parameter 1), while the second one can be chosen more loosely (it doesn\u0026rsquo;t impact performance much). Again, you don\u0026rsquo;t know this in advance.\nGrid Search A common and inefficient way to sample hyperparameters is to discretize the search space and try all configurations: this is called grid search.\nGrid search is simple but should be avoided. As shown in the image above, you have to be very careful when discretizing the space: if you are unlucky, you might completely miss the optimal parameters (the high return region in red is not part of the sampled parameters).\nYou can have a finer discretization, but then the number of configurations will grow rapidly. Grid search also scales very poorly with dimensions: the number of configurations you have to try grows exponentially!\nFinally, you may have noticed that grid search wastes resources: it allocates the same budget to important and unimportant parameters.\nA better but still simpler alternative to grid search is random search.\nRandom Search Random search samples the search space uniformly.\nIt may seem counterintuitive at first that random search is better than grid search, but hopefully the diagram below will be of some help:\nBy sampling uniformly, random search no longer depends on the discretization, making it a better starting point. This is especially true once you have more dimensions.\nOf course, random search is pretty naive, so can we do better?\nBayesian Optimization One of the main ideas of Bayesian Optimization (BO) is to learn a surrogate model that estimates, with some uncertainty, the performance of a configuration (before trying it). In the figure below, this is the solid black line.\nIt tries to approximate the real (unknown) objective function (dotted line). The surrogate model comes with some uncertainty (blue area), which allows you to choose which configuration to try next.\nA BO algorithm works in three steps. First, you have a current estimate of the objective function, which comes from your previous observations (configurations that have been tried). Around these observations, the uncertainty of the surrogate model will be small.\nTo select the next configuration to sample, BO relies on an acquisition function. This function takes into account the value of the surrogate model and the uncertainty.\nHere the acquisition function samples the most optimistic set of parameters given the current model (maximum of surrogate model value + uncertainty): you want to sample the point that might give you the best performance.\nOnce you have tried this configuration, the surrogate model and acquisition function are updated with the new observation (the uncertainty around this new observation decreases), and a new iteration begins.\nIn this example, you can see that the sampler quickly converges to a value that is close to the optimum.\nGaussian Process (GP) and Tree of Parzen Estimators (TPE) algorithms both use this technique to optimize hyperparameters.\nOther Black Box Optimization (BBO) Algorithms I won\u0026rsquo;t cover them in detail but you should also know about two additional classes of black box optimization (BBO) algorithms: Evolution Strategies (ES, CMA-ES) and Particle Swarm Optimization (PSO). Both of those approaches optimize a population of solutions that evolves over time.\nSchedulers / Pruners The job of the pruner is to identify and discard poorly performing hyperparameter configurations, eliminating them from further consideration. This ensures that your resources are focused on the most promising candidates, saving valuable time and computating power.\nDeciding when to prune a trial can be tricky. If you don\u0026rsquo;t allocate enough resources to a trial, you won\u0026rsquo;t be able to judge whether it\u0026rsquo;s a good trial or not.\nIf you prune too aggressively, you will favor the candidates that perform well early (and then plateau) to the detriment of those that perform better with more budget.\nMedian Pruner A simple but effective scheduler is the median pruner, used in Google Vizier.\nThe idea is to prune if the intermediate result of the trial is worse than the median of the intermediate results of previous trials at the same step. In other words, at a given time, you look at the current candidate. If it performs worse than half of the candidates at the same time, you stop it, otherwise you let it continue.\nTo avoid biasing the optimization toward candidates that perform well early in training, you can play with a \u0026ldquo;warmup\u0026rdquo; parameter that prevents any trial from being pruned until a minimum budget is reached.\nSuccessive Halving Successive halving is a slightly more advanced algorithm. You start with many configurations and give them all a minimum budget.\nThen, at some intermediate step, you reduce the number of candidates and keep only the most promising ones.\nOne limitation with this algorithm is that it has three hyperparameters (to be tuned :p!): the minimum budget, the initial number of trials and the reduction factor (what percentage of trials are discarded at each intermediate step).\nThat\u0026rsquo;s where the Hyperband algorithm comes in (I highly recommend reading the paper). Hyperband does a grid search on the successive halving parameters (in parallel) and thus tries different tradeoffs (remember the \u0026ldquo;n\u0026rdquo; vs. \u0026ldquo;n/B\u0026rdquo; tradeoff ;)?).\nConclusion In this post, I introduced the challenges and basic components of automatic hyperparameter tuning:\nthe trade-off between the number of trials and the resources allocated per trial the different samplers that choose which set of parameters to try the various schedulers that decide how to allocate resources and when to stop a trial The second part is about applying hyperparameter tuning in practice with the Optuna library, using reinforcement learning as an example.\nCitation @article{raffin2023hyperparameter, title = \u0026quot;Automatic Hyperparameter Tuning - A Visual Guide\u0026quot;, author = \u0026quot;Raffin, Antonin\u0026quot;, journal = \u0026quot;araffin.github.io\u0026quot;, year = \u0026quot;2023\u0026quot;, month = \u0026quot;May\u0026quot;, url = \u0026quot;https://araffin.github.io/post/hyperparam-tuning/\u0026quot; } Acknowledgement All the graphics were made using excalidraw.\nDid you find this post helpful? Consider sharing it 🙌 ","date":1684108800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684108800,"objectID":"688c42c79831a03245709acb69e587c7","permalink":"/post/hyperparam-tuning/","publishdate":"2023-05-15T00:00:00Z","relpermalink":"/post/hyperparam-tuning/","section":"post","summary":"When you\u0026rsquo;re building a machine learning model, you want to find the best hyperparameters to make it shine. But who has the luxury of trying out every possible combination?\nThe good news is that automatic hyperparameter tuning can help you.","tags":null,"title":"Automatic Hyperparameter Tuning - A Visual Guide (Part 1)","type":"post"},{"authors":null,"categories":null,"content":"Proof of concept version of Stable-Baselines3 in Jax.\nGithub repository: https://github.com/araffin/sbx\nImplemented algorithms:\nSoft Actor-Critic (SAC) and SAC-N Truncated Quantile Critics (TQC) Dropout Q-Functions for Doubly Efficient Reinforcement Learning (DroQ) Proximal Policy Optimization (PPO) Deep Q Network (DQN) Twin Delayed DDPG (TD3) Deep Deterministic Policy Gradient (DDPG) Batch Normalization in Deep Reinforcement Learning (CrossQ) ","date":1683763200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1683763200,"objectID":"fc6991c0e0b2d0fb583c1037d357c5cf","permalink":"/project/sbx/","publishdate":"2023-05-11T00:00:00Z","relpermalink":"/project/sbx/","section":"project","summary":"Proof of concept version of Stable-Baselines3 in Jax.","tags":["Deep Learning","Machine Learning","Reinforcement Learning","Python","Jax"],"title":"SBX: Stable Baselines Jax","type":"project"},{"authors":null,"categories":null,"content":"Blazingly fast implementation of the Datasaurus paper (500x faster than the original): \u0026ldquo;Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing\u0026rdquo; by Justin Matejka and George Fitzmaurice.\nGithub repository: https://github.com/araffin/datasaurust\n","date":1678492800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678492800,"objectID":"0758b20e6fe5ed434d34e5fd4592e662","permalink":"/project/datasaurust/","publishdate":"2023-03-11T00:00:00Z","relpermalink":"/project/datasaurust/","section":"project","summary":"Blazingly fast implementation of the Datasaurus paper in Rust. Same Stats, Different Graphs. ","tags":["Machine Learning","Rust"],"title":"Datasaurust","type":"project"},{"authors":["Antonin Raffin","Daniel Seidel","Jens Kober","Alin Albu-Schäffer","Joao Silvério","Freek Stulp"],"categories":null,"content":"","date":1664841600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664841600,"objectID":"8e7239fffb0f5e1aed072a1b6ecf82c0","permalink":"/publication/exploit-bert/","publishdate":"2022-10-04T00:00:00Z","relpermalink":"/publication/exploit-bert/","section":"publication","summary":"Spring-based actuators in legged locomotion provide energy-efficiency and improved performance, but increase the difficulty of controller design. While previous work has focused on extensive modeling and simulation to find optimal controllers for such systems, we propose to learn model-free controllers directly on the real robot. In our approach, gaits are first synthesized by central pattern generators (CPGs), whose parameters are optimized to quickly obtain an open-loop controller that achieves efficient locomotion. Then, to make this controller more robust and further improve the performance, we use reinforcement learning to close the loop, to learn corrective actions on top of the CPGs. We evaluate the proposed approach on the DLR elastic quadruped bert. Our results in learning trotting and pronking gaits show that exploitation of the spring actuator dynamics emerges naturally from optimizing for dynamic motions, yielding high-performing locomotion, particularly the fastest walking gait recorded on bert, despite being model-free. The whole process takes no more than 1.5 hours on the real robot and results in natural-looking gaits. ","tags":["Reinforcement Learning,","Robotics"],"title":"Learning to Exploit Elastic Actuators for Quadruped Locomotion","type":"publication"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1663252200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663252200,"objectID":"7a7cabdea39fc867e0b595ad1c03d5d3","permalink":"/talk/rl-dresden/","publishdate":"2022-01-01T00:08:00Z","relpermalink":"/talk/rl-dresden/","section":"talk","summary":"Presentation on applying Reinforcement Learning directly on real robots","tags":["Reinforcement Learning"],"title":"Training RL agents directly on real robots","type":"talk"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1653292800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653292800,"objectID":"53a5dc7cf0a122aba8e8f4005e05dc8c","permalink":"/talk/tools-icra/","publishdate":"2021-01-01T00:08:00Z","relpermalink":"/talk/tools-icra/","section":"talk","summary":"Hands-on RL for Robotics with EAGERx and Stable-Baselines3","tags":["Reinforcement Learning"],"title":"Tutorial: Tools for Robotic Reinforcement Learning","type":"talk"},{"authors":["Shengyi Huang","Rousslan Fernand Julien Dossa","Antonin Raffin","Anssi Kanervisto","Weixun Wang"],"categories":null,"content":"","date":1651017600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651017600,"objectID":"8f718a0e3801faff76877c32ef6aaef9","permalink":"/publication/ppo-iclr/","publishdate":"2022-04-27T00:00:00Z","relpermalink":"/publication/ppo-iclr/","section":"publication","summary":"Proximal policy optimization (PPO) has become one of the most popular deep reinforcement learning (DRL) algorithms. Yet, reproducing the PPO's results has been challenging in the community.  While recent works conducted ablation studies to provide insight on PPO's implementation details, these works are not structured as tutorials and only focus on details concerning robotics tasks. As a result, reproducing PPO from scratch can become a daunting experience. Instead of introducing additional improvements, or doing further ablation studies, this blog post takes a step back and focuses on delivering a thorough reproduction of PPO in all accounts, as well as aggregating, documenting, and cataloging its most salient implementation details. This blog post also points out software engineering challenges in PPO and further efficiency improvement via the accelerated vectorized environments. With these, we believe this blog post will help people understand PPO faster and better, facilitating customization and research upon this versatile RL algorithm.","tags":["Reinforcement Learning,","Robotics"],"title":"The 37 Implementation Details of Proximal Policy Optimization","type":"publication"},{"authors":["Antonin Raffin","Ashley Hill","Adam Gleave","Anssi Kanervisto","Maximilian Ernestus","Noah Dormann"],"categories":null,"content":"","date":1638576000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638576000,"objectID":"07f723cfa06986ef428858f1e7812593","permalink":"/publication/sb3/","publishdate":"2021-12-04T00:00:00Z","relpermalink":"/publication/sb3/","section":"publication","summary":"Stable-Baselines3 provides open-source implementations of deep reinforcement learning (RL) algorithms in Python. The implementations have been benchmarked against reference codebases, and automated unit tests cover 95% of the code. The algorithms follow a consistent interface and are accompanied by extensive documentation, making it simple to train and compare different RL algorithms. Our documentation, examples, and source-code are available at https://github.com/DLR-RM/stable-baselines3.","tags":["Reinforcement Learning,","Robotics"],"title":"Stable-Baselines3: Reliable Reinforcement Learning Implementations ","type":"publication"},{"authors":null,"categories":null,"content":"It is critical for Reinforcement Learning (RL) practitioners to properly evaluate and compare results. Reporting results with poor comparison leads to a progress mirage and may underestimate the stochasticity of the results. To this end, Deep RL at the Edge of the Statistical Precipice (Neurips Oral) provides recommendations for a more rigorous evaluation of DeepRL algorithms. The paper comes with an open-source library named rliable.\nThis blog post is meant to be a visual explanation of the tools used by the rliable library to better evaluate and compare RL algorithms. We will go through the different recommendations of the authors and give a visual explanation for each of them.\nScore Normalization To have more datapoints that just 10 random seeds, rliable recommends aggregating all N runs across all M tasks (e.g., aggregating all Atari games results) so we have a total of NxM runs from which we can sample from. To have comparable scores across tasks, we first need to normalize the scores of each run per task as follows:\nNote: the score may depend on what you want to compare. It is usually the final performance of the RL agent, after training.\nStratified Bootstrap Confidence Intervals To account for uncertainty in aggregate performance, rliable uses stratified bootstrap confidence intervals. This may sound complicated, but let\u0026rsquo;s go slowly through the meaning of each of those terms.\nFirst, bootstrap means sampling with replacement. For instance, if we sample four times with replacement 3 runs of indices [1, 2, 3] on a task A, we may get: [2, 2, 3, 1] the first time, [3, 1, 1, 1] the second time, \u0026hellip;\nStratified bootstrap means that we first group our datapoints into buckets (or strata), and then sample with replacement each of those buckets according to their size:\nIn RL, the buckets are the different tasks or environments. With stratified bootstrap, all tasks are always represented in the sampled runs. This avoids computing the aggregate metrics only on a subset of all the environments:\nEach time we sample with replacement the runs, we compute the different metrics (for instance, mean score) for those sampled runs. To report uncertainty, rliable computes bootstrap confidence intervals (CIs) following the percentiles\u0026rsquo; method:\nNote: there are other methods for computing CI with bootstrap, but percentiles was found by the authors to work well in practice.\nInterquartile Mean (IQM) To summarize benchmark performance, it is common to report mean/median performance of the runs. However, mean is known to be sensible to outliers and median may not reflect enough the distribution of scores, so rliable suggests to use Interquartile Mean (IQM) instead:\nPerformance Profiles To report performance variability across tasks and runs, the authors proposes to use performance profiles. It tells for a given target performance (for example, 60% of the reference performance) the proportion of runs that achieve it.\nSource: image from the authors of the rliable library\nProbability of Improvement Finally, to test whether an algorithm X is probably better or not than an algorithm Y, rliable uses the U-statistic from a Mann–Whitney U test:\nThe probability of improvement is then average over the tasks. A probability of improvement around 0.5 means that the two algorithms have similar performances.\nIn Practice: Using the RL Zoo To allow more users to use rliable, we added basic support of it in the RL Baselines3 Zoo, a training framework for Stable-Baselines3. Fore more information, please follow the instructions in the README.\nConclusion In this post, we have seen the different tools used by rliable to better evaluate RL algorithms:\nscore normalization to aggregate scores across tasks stratified bootstrap to provide proper confidence intervals interquartile mean (IQM) to summarize benchmark performance performance profile for an overview of the results and their variability probability of improvement to compare two algorithms Acknowledgement I would like to thank Pablo Samuel Castro and Rishabh Agarwal for checking the correctness of the visuals.\nAll the graphics were made using excalidraw.\nDid you find this post helpful? Consider sharing it 🙌 ","date":1635465600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635465600,"objectID":"45ef620010a09a29a398799acdc2765b","permalink":"/post/rliable/","publishdate":"2021-10-29T00:00:00Z","relpermalink":"/post/rliable/","section":"post","summary":"It is critical for Reinforcement Learning (RL) practitioners to properly evaluate and compare results. Reporting results with poor comparison leads to a progress mirage and may underestimate the stochasticity of the results.","tags":null,"title":"Rliable: Better Evaluation for Reinforcement Learning - A Visual Explanation","type":"post"},{"authors":["Antonin Raffin","Jens Kober","Freek Stulp"],"categories":null,"content":"","date":1631577600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631577600,"objectID":"d551b1d32cc242b5e44a434a9adfbf86","permalink":"/publication/gsde/","publishdate":"2021-09-14T00:00:00Z","relpermalink":"/publication/gsde/","section":"publication","summary":"We extend the original state-dependent exploration (SDE) to apply deep reinforcement learning algorithms directly on real robots. The resulting method, gSDE, yields competitive results in simulation but outperforms the unstructured exploration on the real robot.","tags":["Reinforcement Learning,","Robotics"],"title":"Smooth Exploration for Robotic Reinforcement Learning","type":"publication"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1622311200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1622311200,"objectID":"0fe3b40dc836986ff33dbcbef5da0bf1","permalink":"/talk/learning-race/","publishdate":"2021-01-01T00:08:00Z","relpermalink":"/talk/learning-race/","section":"talk","summary":"Talk for the DonkeyCar community about learning to race in hours using reinforcement learning.","tags":["Reinforcement Learning"],"title":"Learning to Race in Hours with Reinforcement Learning","type":"talk"},{"authors":["Antonin Raffin","Bastian Deutschmann","Freek Stulp"],"categories":null,"content":" ","date":1619827200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619827200,"objectID":"aa5ff2774cc2684f78957114cdee1871","permalink":"/publication/fault-tolerant/","publishdate":"2021-05-01T00:00:00Z","relpermalink":"/publication/fault-tolerant/","section":"publication","summary":"Fault-Tolerant 6D Pose Estimation for Soft Robot. We present a simple ensembling method to detect and handle failures on a tendon driven robot.","tags":["Robotics"],"title":"Fault-Tolerant Six-DoF Pose Estimation for Tendon-Driven Continuum Mechanisms","type":"publication"},{"authors":["Antonin Raffin"],"categories":null,"content":" RL Tips and Tricks Slides SB3 Hands-on Session slides SB3 Hands-on Session github repo ","date":1617958800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617958800,"objectID":"91fa1158d6a5603f9d79c6a374575703","permalink":"/talk/rlvs/","publishdate":"2021-01-01T00:08:00Z","relpermalink":"/talk/rlvs/","section":"talk","summary":"Talk at the reinforcement learning virtual school on applying RL in practice and hands-on session with Stable-Baselines3.","tags":["Reinforcement Learning"],"title":"RL Tips and Tricks / The Challenges of Applying RL to Real Robots","type":"talk"},{"authors":null,"categories":null,"content":"After several months of beta, we are happy to announce the release of Stable-Baselines3 (SB3) v1.0, a set of reliable implementations of reinforcement learning (RL) algorithms in PyTorch =D! It is the next major version of Stable Baselines.\nThe implementations have been benchmarked against reference codebases, and automated unit tests cover 95% of the code.\nIn this blog post, we give you an overview of Stable-Baselines3: the motivation behind it, its design principles and features, how we ensure high-quality implementations and some concrete examples.\nTL;DR: Stable-Baselines3 (SB3) is a library providing reliable implementations of reinforcement learning algorithms in PyTorch. It provides a clean and simple interface, giving you access to off-the-shelf state-of-the-art model-free RL algorithms.\nThe library is fully documented, tested and its interface allows to train an RL agent in only few lines of code =):\nimport gym from stable_baselines3 import SAC # Train an agent using Soft Actor-Critic on Pendulum-v0 env = gym.make(\u0026quot;Pendulum-v0\u0026quot;) model = SAC(\u0026quot;MlpPolicy\u0026quot;, env, verbose=1) # Train the model model.learn(total_timesteps=20000) # Save the model model.save(\u0026quot;sac_pendulum\u0026quot;) # Load the trained model model = SAC.load(\u0026quot;sac_pendulum\u0026quot;) # Start a new episode obs = env.reset() # What action to take in state `obs`? action, _ = model.predict(obs, deterministic=True) where defining and training a RL agent can be written in two lines of code:\nfrom stable_baselines3 import PPO # Train an agent using Proximal Policy Optimization on CartPole-v1 model = PPO(\u0026quot;MlpPolicy\u0026quot;, \u0026quot;CartPole-v1\u0026quot;).learn(total_timesteps=20000) Links GitHub repository: https://github.com/DLR-RM/stable-baselines3\nPaper: http://jmlr.org/papers/v22/20-1364.html\nDocumentation: https://stable-baselines3.readthedocs.io/\nRL Baselines3 Zoo: https://github.com/DLR-RM/rl-baselines3-zoo\nContrib: https://github.com/Stable-Baselines-Team/stable-baselines3-contrib\nRL Tutorial: https://github.com/araffin/rl-tutorial-jnrr19\nMotivation Deep reinforcement learning (RL) research has grown rapidly in recent years, yet results are often difficult to reproduce. A major challenge is that small implementation details can have a substantial effect on performance \u0026ndash; often greater than the difference between algorithms. It is particularly important that implementations used as experimental baselines are reliable; otherwise, novel algorithms compared to weak baselines lead to inflated estimates of performance improvements.\nTo help with this problem, we present Stable-Baselines3 (SB3), an open-source framework implementing seven commonly used model-free deep RL algorithms, relying on the OpenAI Gym interface.\nWe take great care to adhere to software engineering best practices to achieve high-quality implementations that match prior results.\nHistory SB3 builds on our experience maintaining Stable Baselines (SB2), a fork of OpenAI Baselines built on TensorFlow 1.x. If you haven\u0026rsquo;t heard of it, Stable-Baselines (SB2) is a trusted library and has already been used in many projects and papers with already more than 300+ citations!\nThose two years of maintaining SB2 have been a rewarding exchange with our users, where tons of bugs where fixed and new features like callbacks where added to ease the use of the library.\nHowever, SB2 was still relying on OpenAI Baselines initial codebase and with the upcoming release of Tensorflow 2, more and more internal TF code was being deprecated.\nAfter discussing the matter with the community, we decided to go for a complete rewrite in PyTorch (cf issues #366, #576 and #733), codename: Stable-Baselines31.\nStable-Baselines3 keeps the same easy-to-use API while improving a lot on the internal code, in particular by adding static type checking.\nRe-starting almost from scratch is long-term investment: it took quite some effort and time but we now have a smaller, cleaner and reliable core that is easier to maintain and extend =).\nThere are already many open source reinforcement learning libraries (almost one new every week), so why did we create a new one? In the next sections you will learn about the design principles and main features of the Stable-Baselines3 library that differenciate it from others.\n1 The very first name of the new version was \u0026ldquo;torchy-baselines\u0026rdquo;\nDesign Principles Our main goal is to provide a user-friendly and reliable RL library. To keep SB3 simple to use and maintain, we focus on model-free, single-agent RL algorithms, and rely on external projects to extend the scope to imitation and offline learning.\nWe prioritize maintaining stable implementations over adding new features or algorithms, and avoid making breaking changes. We provide a consistent, clean and fully documented API, inspired by the scikit-learn API.\nOur code is easily modifiable by users as we favour readability and simplicity over modularity, although we make use of object-oriented programming to reduce code duplication.\nFeatures Stable-Baselines3 provides many features, ranging from a simple API to a complete experimental framework that allows advanced usage like automatic hyperparameters tuning.\nSimple API Training agents in Stable-Baselines3 takes just a few lines of code, after which the agent can be queried for actions (see quick example below). This allows you to easily use the baseline algorithms and components in your experiments (eg. Imitating Animals, Slime Volleyball, Adversarial Policies), as well as apply RL to novel tasks and environments, like continual learning when attacking WiFi networks or dampening bridge vibrations.\nimport gym from stable_baselines3 import A2C from stable_baselines3.common.monitor import Monitor from stable_baselines3.common.callbacks import CheckpointCallback, EvalCallback # Save a checkpoint every 1000 steps checkpoint_callback = CheckpointCallback(save_freq=5000, save_path=\u0026quot;./logs/\u0026quot;, name_prefix=\u0026quot;rl_model\u0026quot;) # Evaluate the model periodically # and auto-save the best model and evaluations # Use a monitor wrapper to properly report episode stats eval_env = Monitor(gym.make(\u0026quot;LunarLander-v2\u0026quot;)) # Use deterministic actions for evaluation eval_callback = EvalCallback(eval_env, best_model_save_path=\u0026quot;./logs/\u0026quot;, log_path=\u0026quot;./logs/\u0026quot;, eval_freq=2000, deterministic=True, render=False) # Train an agent using A2C on LunarLander-v2 model = A2C(\u0026quot;MlpPolicy\u0026quot;, \u0026quot;LunarLander-v2\u0026quot;, verbose=1) model.learn(total_timesteps=20000, callback=[checkpoint_callback, eval_callback]) # Retrieve and reset the environment env = model.get_env() obs = env.reset() # Query the agent (stochastic action here) action, _ = model.predict(obs, deterministic=False) Documentation SB3 comes with extensive documentation of the code API. We also include a user guide, covering both basic and more advanced usage with a collection of concrete examples. Moreover, we have developed a Colab notebook based RL tutorial, so you can demo the library directly in the browser. Additionally, we include common tips for running RL experiments and a developer guide.\nWe also pay close attention to questions and uncertainties from SB3 users, updating the documentation to address these.\nStable-Baselines3 Documentation\nHigh-Quality Implementations Algorithms are verified against published results by comparing the agent learning curves (cf issues #48 and #48).\nAs an example, to compare against TD3 and SAC original implementation, we integrated SB3 callbacks and made sure both SB3 and original implementations were using the same hyperparameters (the code diff for SAC and TD3 repos can be found here and there).\nDuring this period, that\u0026rsquo;s how we realized some tricky details that made a big difference. For example, PyTorch RMSProp is different from TensorFlow one (we include a custom version inside our codebase), and the epsilon value of the optimizer can make a big difference:\nA and B are actually the same RL algorithm (A2C), sharing the exact same code, same hardware, same hyperparameters\u0026hellip; except the epsilon value to avoid division by zero in the optimizer (one is eps=1e-5, the other eps=1e-7)\nDespite all those tricky details (and other nasty bugs), at the end, we managed to match SB2 results and original implementations closely:\nStable-Baselines (SB2) vs Stable-Baselines3 (SB3) A2C result on CartPole-v1\nStable-Baselines (SB2) vs Stable-Baselines3 (SB3) results on BreakoutNoFrameskip-v4\nStable-Baselines3 (SB3) vs original implementations results on HalfCheetahBulletEnv-v0\nComprehensive Stable-Baselines3 contains the following state-of-the-art on- and off-policy algorithms, commonly used as experimental baselines: A2C, DDPG, DQN, HER, PPO, SAC and TD3.\nMoreover, SB3 provides various algorithm-independent features. We support logging to CSV files and TensorBoard. Users can log custom metrics and modify training via user-provided callbacks.\nTo speed up training, we support parallel (or \u0026ldquo;vectorized\u0026rdquo;) environments. To simplify training, we implement common environment wrappers, like preprocessing Atari observations to match the original DQN experiments.\nYour browser does not support the video tag. Tensorboard video integration\nExperimental Framework RL Baselines Zoo provides scripts to train and evaluate agents, tune hyperparameters, record videos, store experiment setup and visualize results. We also include a collection of pre-trained reinforcement learning agents together with tuned hyperparameters for simple control tasks, PyBullet environments and Atari games, optimized using Optuna.\nWe follow best practices for training and evaluation, such as evaluating in a separate environment, using deterministic evaluation where required (SAC) and storing all hyperparameters necessary to replicate the experiment.\nBelow, you can see basic usage of the RL zoo (training, loading, tuning hyperparameters), which has a simple command line:\n# Train an A2C agent on Atari breakout using tuned hyperparameters, # evaluate the agent every 10k steps and save a checkpoint every 50k steps python train.py --algo a2c --env BreakoutNoFrameskip-v4 \\ --eval-freq 10000 --save-freq 50000 # Plot the learning curve python scripts/all_plots.py -a a2c -e BreakoutNoFrameskip-v4 -f logs/ # Load and evaluate a trained agent for 1000 steps # optionally, you can also load a checkpoint using --load-checkpoint python enjoy.py --algo sac --env Pendulum-v0 -n 1000 # Tune the hyperparameters of ppo on BipedalWalker-v3 with a budget of 50 trials # using 2 parallel jobs, a TPE sampler and median pruner python train.py --algo ppo --env BipedalWalker-v3 -optimize --n-trials 50 \\ --n-jobs 2 --sampler tpe --pruner median Stable-Baselines3 Contrib We implement experimental features in a separate contrib repository. This allows SB3 to maintain a stable and compact core, while still providing the latest features, like Quantile Regression DQN (QR-DQN) or Truncated Quantile Critics (TQC).\nImplementations in contrib need not be tightly integrated with the main SB3 codebase, but we maintain the same stringent review requirements to ensure users can trust the contrib implementations. Implementations from contrib that have stood the test of time may be integrated into the main repository.\nfrom sb3_contrib import QRDQN, TQC # Train an agent using QR-DQN on Acrobot-v0 model = QRDQN(\u0026quot;MlpPolicy\u0026quot;, \u0026quot;Acrobot-v0\u0026quot;).learn(total_timesteps=20000) # Train an agent using Truncated Quantile Critics on Pendulum-v0 model = TQC(\u0026quot;MlpPolicy\u0026quot;, \u0026quot;Pendulum-v0\u0026quot;).learn(total_timesteps=20000) Migration from Stable-Baselines (SB2) If you are Stable-Baselines (SB2) user and would like to switch to SB3, we have a migration guide waiting for you ;)\nMost of the time, it only requires to change the import from stable_baselines by from stable_baselines3 and rename some parameters.\nFor instance, if your code was like that for Stable-Baselines:\nfrom stable_baselines import PPO2 from stable_baselines.common.cmd_util import make_atari_env env = make_atari_env(\u0026quot;BreakoutNoFrameskip-v4\u0026quot;, num_env=8, seed=21) model = PPO2(\u0026quot;MlpPolicy\u0026quot;, env, n_steps=128, nminibatches=4, noptepochs=4, ent_coef=0.01, verbose=1) model.learn(int(1e5)) the corresponding SB3 code is:\nfrom stable_baselines3 import PPO # cmd_util was renamed env_util for clarity from stable_baselines3.common.env_util import make_atari_env # num_env was renamed n_envs env = make_atari_env(\u0026quot;BreakoutNoFrameskip-v4\u0026quot;, n_envs=8, seed=21) # we use batch_size instead of nminibatches which # was dependent on the number of environments # batch_size = (n_steps * n_envs) // nminibatches = 256 # noptepochs was renamed n_epochs model = PPO(\u0026quot;MlpPolicy\u0026quot;, env, n_steps=128, batch_size=256, n_epochs=4, ent_coef=0.01, verbose=1) model.learn(int(1e5)) For a complete migration example, you can also compare the RL Zoo of SB2 with the one from SB3.\nExamples Let\u0026rsquo;s see now how we can now use the library in practice with some examples. We\u0026rsquo;re going to see how to easily customize the network architecture, train an agent to play Atari games and normalize observations when training on continuous control tasks like PyBullet environments.\nFor each of them, you can try it online using Google colab notebook.\nCustom Policy Network To customize a policy with SB3, all you need to do is choose a network architecture and pass a policy_kwargs (\u0026ldquo;policy keyword arguments\u0026rdquo;) to the algorithm constructor.\nThe following snippet shows how to customize the architecture and activation function for one on-policy (PPO) and one off-policy (SAC) algorithm:\nimport torch as th from stable_baselines3 import PPO, SAC # Custom actor (pi) and value function (vf) networks # of two layers of size 32 each with Relu activation function policy_kwargs = dict(activation_fn=th.nn.ReLU, net_arch=dict(pi=[32, 32], vf=[32, 32])) # Create the agent model = PPO(\u0026quot;MlpPolicy\u0026quot;, \u0026quot;CartPole-v1\u0026quot;, policy_kwargs=policy_kwargs, verbose=1) # Custom actor architecture with two layers of 64 units each # Custom critic architecture with two layers of 400 and 300 units policy_kwargs = dict(net_arch=dict(pi=[64, 64], qf=[400, 300])) # Create the agent model = SAC(\u0026quot;MlpPolicy\u0026quot;, \u0026quot;Pendulum-v0\u0026quot;, policy_kwargs=policy_kwargs, verbose=1) model.learn(5000) Atari Games Training a RL agent on Atari games is straightforward thanks to make_atari_env helper function and the VecFrameStack wrapper. It will do all the preprocessing and multiprocessing for you.\nColab link: Try it online\nfrom stable_baselines3.common.env_util import make_atari_env from stable_baselines3.common.vec_env import VecFrameStack from stable_baselines3 import A2C # There already exists an environment generator # that will make and wrap atari environments correctly. # Here we are also multi-worker training (n_envs=4 =\u0026gt; 4 environments) env = make_atari_env('PongNoFrameskip-v4', n_envs=4, seed=0) # Frame-stacking with 4 frames env = VecFrameStack(env, n_stack=4) model = A2C('CnnPolicy', env, verbose=1) model.learn(total_timesteps=25000) obs = env.reset() while True: # By default, deterministic=False, so we use the stochastic policy action, _states = model.predict(obs) obs, rewards, dones, info = env.step(action) env.render() PyBullet: Normalizing Input Features Normalizing input features may be essential to successful training of an RL agent (by default, images are scaled but not other types of input), for instance when training on PyBullet environments. For that, a wrapper exists and will compute a running average and standard deviation of input features (it can do the same for rewards).\nColab link: Try it online\nimport os import gym import pybullet_envs from stable_baselines3.common.vec_env import DummyVecEnv, VecNormalize from stable_baselines3 import PPO env = DummyVecEnv([lambda: gym.make(\u0026quot;HalfCheetahBulletEnv-v0\u0026quot;)]) # Automatically normalize the input features and reward env = VecNormalize(env, norm_obs=True, norm_reward=True, clip_obs=10.) model = PPO('MlpPolicy', env) model.learn(total_timesteps=2000) # Don't forget to save the VecNormalize statistics when saving the agent log_dir = \u0026quot;/tmp/\u0026quot; model.save(log_dir + \u0026quot;ppo_halfcheetah\u0026quot;) stats_path = os.path.join(log_dir, \u0026quot;vec_normalize.pkl\u0026quot;) env.save(stats_path) # To demonstrate loading del model, env # Load the agent model = PPO.load(log_dir + \u0026quot;ppo_halfcheetah\u0026quot;) # Load the saved statistics env = DummyVecEnv([lambda: gym.make(\u0026quot;HalfCheetahBulletEnv-v0\u0026quot;)]) env = VecNormalize.load(stats_path, env) # do not update them at test time env.training = False # reward normalization is not needed at test time env.norm_reward = False More Examples You can find more examples and associated colab notebooks in the documentation.\nTo the Infinity and Beyond! We presented Stable-Baselines3 v1.0, a set of reliable reinforcement learning implementations and the next major version of the Stable-Baselines.\nIf you want to follow the updates of the library, we encourage you to star the repo on GitHub and click on \u0026ldquo;Watch -\u0026gt; Custom -\u0026gt; Releases\u0026rdquo; to be notified each time a new version is released ;) (you can also follow Adam or Antonin on Twitter). Coming soon, one of our long-time requested feature: mixed observations (aka dict obs) support.\nIn case you want to contribute, make sure to read the contributing guide first.\nFinally, if you make a cool project using Stable-Baselines3, please tell us when you want it to appear in our project page.\nAbout the Authors This blog post was co-written by Stable-Baselines3 maintainers:\nAntonin Raffin (@araffin) Ashley Hill (@hill-a) Maximilian Ernestus (@ernestum) Adam Gleave (@AdamGleave) Anssi Kanervisto (@Miffyli). Citing the Project To cite Stable-Baselines3 in publications:\n@article{stable-baselines3, author = {Antonin Raffin and Ashley Hill and Adam Gleave and Anssi Kanervisto and Maximilian Ernestus and Noah Dormann}, title = {Stable-Baselines3: Reliable Reinforcement Learning Implementations}, journal = {Journal of Machine Learning Research}, year = {2021}, volume = {22}, number = {268}, pages = {1-8}, url = {http://jmlr.org/papers/v22/20-1364.html} } Did you find this post helpful? Consider sharing it 🙌 ","date":1614470400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614470400,"objectID":"42b3adc02895c275560062c8febf4972","permalink":"/post/sb3/","publishdate":"2021-02-28T00:00:00Z","relpermalink":"/post/sb3/","section":"post","summary":"After several months of beta, we are happy to announce the release of Stable-Baselines3 (SB3) v1.0, a set of reliable implementations of reinforcement learning (RL) algorithms in PyTorch =D! It is the next major version of Stable Baselines.","tags":null,"title":"Stable-Baselines3: Reliable Reinforcement Learning Implementations","type":"post"},{"authors":null,"categories":null,"content":"Stable Baselines3 is a set of improved implementations of reinforcement learning algorithms in PyTorch. It is the next major version of Stable Baselines.\nGithub repository: https://github.com/DLR-RM/stable-baselines3\nDocumentation: https://stable-baselines3.readthedocs.io/\nRL Baselines3 Zoo (collection of pre-trained agents): https://github.com/DLR-RM/rl-baselines3-zoo\nRL Baselines3 Zoo also offers a simple interface to train, evaluate agents and do hyperparameter tuning.\n","date":1589155200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589155200,"objectID":"0031d0cb36479d7f729f11e3c0e1f3bf","permalink":"/project/stable-baselines3/","publishdate":"2020-05-11T00:00:00Z","relpermalink":"/project/stable-baselines3/","section":"project","summary":"A set of improved implementations of reinforcement learning algorithms in PyTorch.","tags":["Deep Learning","Machine Learning","Reinforcement Learning","Python"],"title":"Stable Baselines3","type":"project"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1571357340,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571357340,"objectID":"191967224eab4fd5d222185d2af424c8","permalink":"/talk/rl-tuto-jnrr19/","publishdate":"2019-10-18T00:09:00Z","relpermalink":"/talk/rl-tuto-jnrr19/","section":"talk","summary":"Beginner tutorial on Stable Baselines library with colab notebooks","tags":["Reinforcement Learning"],"title":"RL Tutorial on Stable Baselines","type":"talk"},{"authors":["Antonin Raffin"],"categories":null,"content":"","date":1565049600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565049600,"objectID":"5b1fe9449e0ac6cc0e935c621adf569b","permalink":"/talk/sb-ias-19/","publishdate":"2019-08-06T00:00:00Z","relpermalink":"/talk/sb-ias-19/","section":"talk","summary":"A talk about SRL, lessons learned from building Stable Baselines and short tutorial on how to use it","tags":["Reinforcement Learning"],"title":"SRL - Stable Baselines Presentation","type":"talk"},{"authors":["Antonin Raffin","Ashley Hill","René Traoré","Timothée Lesort","Natalia Díaz-Rodríguez","David Filliat"],"categories":null,"content":"","date":1548460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548460800,"objectID":"ddac45bde6a4955f3cb901f3e9c36262","permalink":"/publication/decoupling/","publishdate":"2019-01-26T00:00:00Z","relpermalink":"/publication/decoupling/","section":"publication","summary":"We evaluate the benefits of decoupling feature extraction from policy learning in robotics and propose a new way of combining state representation learning methods.","tags":["Reinforcement Learning,","State Representation Learning","Robotics"],"title":"Decoupling feature extraction from policy learning: assessing benefits of state representation learning in goal based robotics","type":"publication"},{"authors":["Antonin Raffin"],"categories":null,"content":"Read the full article on Medium\n","date":1548460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548460800,"objectID":"50154211818d2381ba531579ee213d5e","permalink":"/post/learning-to-drive/","publishdate":"2019-01-26T00:00:00Z","relpermalink":"/post/learning-to-drive/","section":"post","summary":"Learning to drive smoothly in minutes using reinforcement learning on a Donkey Car.","tags":["Deep Learning","Machine Learning","Reinforcement Learning","Python","Robotics"],"title":"Learning to Drive Smoothly in Minutes","type":"post"},{"authors":null,"categories":null,"content":"Learning to drive smoothly in minutes, using a reinforcement learning algorithm \u0026ndash; Soft Actor-Critic (SAC) \u0026ndash; and a Variational AutoEncoder (VAE) in the Donkey Car simulator.\nGithub repository: https://github.com/araffin/learning-to-drive-in-5-minutes\nBlog post on Medium\n","date":1548460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548460800,"objectID":"72a50c53b91c902541ade0c884907d03","permalink":"/project/learning-to-drive/","publishdate":"2019-01-26T00:00:00Z","relpermalink":"/project/learning-to-drive/","section":"project","summary":"Learning to drive smoothly in minutes using reinforcement learning on a Donkey Car.","tags":["Deep Learning","Machine Learning","Reinforcement Learning","Python","Robotics"],"title":"Learning to Drive Smoothly in Minutes","type":"project"},{"authors":null,"categories":null,"content":"A collection of trained Reinforcement Learning (RL) agents, with tuned hyperparameters, using Stable Baselines.\nGithub repository: https://github.com/DLR-RM/rl-baselines3-zoo\nGoals of this repository:\nProvide a simple interface to train and enjoy RL agents Benchmark the different Reinforcement Learning algorithms Provide tuned hyperparameters for each environment and RL algorithm Have fun with the trained agents! ","date":1542931200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542931200,"objectID":"f3225517a7e404e918da7dd7028d960e","permalink":"/project/rl-baselines-zoo/","publishdate":"2018-11-23T00:00:00Z","relpermalink":"/project/rl-baselines-zoo/","section":"project","summary":"A collection of 70+ pre-trained RL agents using Stable Baselines","tags":["Deep Learning","Machine Learning","Reinforcement Learning","Python"],"title":"RL Baselines Zoo","type":"project"},{"authors":null,"categories":null,"content":"S-RL Toolbox: Reinforcement Learning (RL) and State Representation Learning (SRL) Toolbox for Robotics.\nGithub repository: https://github.com/araffin/robotics-rl-srl\nDocumentation: https://s-rl-toolbox.readthedocs.io\nPaper: https://arxiv.org/abs/1809.09369\nMain Features 10 RL algorithms ( Stable Baselines included) logging / plotting / visdom integration / replay trained agent hyperparameter search (hyperband, hyperopt) integration with State Representation Learning (SRL) methods (for feature extraction) visualisation tools (explore latent space, display action proba, live plot in the state space, \u0026hellip;) robotics environments to compare SRL methods easy install using anaconda env or Docker images (CPU/GPU) ","date":1539129600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539129600,"objectID":"c3fb3b79be6c5eacc05315b01f07641e","permalink":"/project/srl-toolbox/","publishdate":"2018-10-10T00:00:00Z","relpermalink":"/project/srl-toolbox/","section":"project","summary":"S-RL Toolbox: Reinforcement Learning (RL) and State Representation Learning (SRL) for Robotics","tags":["Deep Learning","Machine Learning","Reinforcement Learning","Python","State Representation Learning","Robotics"],"title":"S-RL Toolbox","type":"project"},{"authors":null,"categories":null,"content":"Stable Baselines is a set of improved implementations of Reinforcement Learning (RL) algorithms based on OpenAI Baselines.\nGithub repository: https://github.com/hill-a/stable-baselines\nYou can read a detailed presentation of Stable Baselines in the Medium article\n","date":1538006400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538006400,"objectID":"004002cb9541f4bf06ff2b18c7b8d978","permalink":"/project/stable-baselines/","publishdate":"2018-09-27T00:00:00Z","relpermalink":"/project/stable-baselines/","section":"project","summary":"A fork of OpenAI Baselines, implementations of reinforcement learning algorithms ","tags":["Deep Learning","Machine Learning","Reinforcement Learning","Python"],"title":"Stable Baselines","type":"project"},{"authors":["Antonin Raffin","Ashley Hill","René Traoré","Timothée Lesort","Natalia Díaz-Rodríguez","David Filliat"],"categories":null,"content":"","date":1535760000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535760000,"objectID":"0edb8f334860f81d1bf3320939fd3327","permalink":"/publication/srl-toolbox/","publishdate":"2018-09-01T00:00:00Z","relpermalink":"/publication/srl-toolbox/","section":"publication","summary":"State representation learning aims at learning compact representations from raw observations in robotics and control applications. Approaches used for this objective are auto-encoders, learning forward models, inverse dynamics or learning using generic priors on the state characteristics. However, the diversity in applications and methods makes the field lack standard evaluation datasets, metrics and tasks. This paper provides a set of environments, data generators, robotic control tasks, metrics and tools to facilitate iterative state representation learning and evaluation in reinforcement learning settings.","tags":["Reinforcement Learning,","State Representation Learning","Robotics"],"title":"S-RL Toolbox: Environments, Datasets and Evaluation Metrics for State Representation Learning","type":"publication"},{"authors":["Atsushi Sakai","Daniel Ingram","Joseph Dinius","Karan Chawla","Antonin Raffin","Alexis Paques"],"categories":null,"content":"","date":1535673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535673600,"objectID":"5c62040c240d17465ebac976946bfefc","permalink":"/publication/python-robotics/","publishdate":"2018-08-31T00:00:00Z","relpermalink":"/publication/python-robotics/","section":"publication","summary":"This is a Python code collection of robotics algorithms, especially for autonomous navigation.","tags":["Robotics","Kalman Filter","Path Planning","Path Tracking"],"title":"PythonRobotics: a Python code collection of robotics algorithms","type":"publication"},{"authors":["Antonin Raffin","Ashley Hill"],"categories":null,"content":"Read the full article on Medium\n","date":1534723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538352000,"objectID":"043512a89581bc30a7e0c74434b099ae","permalink":"/post/stable-baselines/","publishdate":"2018-08-20T00:00:00Z","relpermalink":"/post/stable-baselines/","section":"post","summary":"Unified structure (scikit-learn like interface) and single codestyle with documentation","tags":["Reinforcement Learning"],"title":"Stable Baselines: a Fork of OpenAI Baselines — Reinforcement Learning Made Easy","type":"post"},{"authors":["Antonin Raffin"],"categories":null,"content":"Read the full article on Medium\n","date":1518220800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519862400,"objectID":"a58f8f7777263a21aec75d124ae5f992","permalink":"/post/arduino-serial/","publishdate":"2018-02-10T00:00:00Z","relpermalink":"/post/arduino-serial/","section":"post","summary":"Arduino built-in functions for sending/receiving data are not very handy and sturdy. We introduce a protocol to communicate (using serial port, bluetooth or sockets) with the Arduino (but not only) in a simple and robust way.","tags":["Robotics"],"title":"Simple and Robust {Computer — Arduino} Serial Communication","type":"post"},{"authors":["Antonin Raffin"],"categories":null,"content":"Read the full article on Medium\n","date":1510272000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"e79827b3c277ba827f7e2ffa72eaf3a0","permalink":"/post/racing-robot/","publishdate":"2017-11-10T00:00:00Z","relpermalink":"/post/racing-robot/","section":"post","summary":"Read the full article on Medium","tags":["Robotics","Machine Learning"],"title":"Autonomous Racing Robot With an Arduino, a Raspberry Pi and a Pi Camera","type":"post"},{"authors":null,"categories":null,"content":"Autonomous toy racing car. CAMaleon team at the Toulouse Robot Race 2017. Humbavision team at IronCar. Medium article: https://medium.com/@araffin/autonomous-racing-robot-with-an-arduino-a-raspberry-pi-and-a-pi-camera-3e72819e1e63\nVideo of the car: https://www.youtube.com/watch?v=xhI71ZdSh6k\n","date":1509062400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509062400,"objectID":"558b84bfdb1ba7f66e8b1e9f2cb096e6","permalink":"/project/racing-robot/","publishdate":"2017-10-27T00:00:00Z","relpermalink":"/project/racing-robot/","section":"project","summary":"Autonomous Racing Robot With an Arduino, a Raspberry Pi and a Pi Camera","tags":["Machine Learning","Python","Robotics","Arduino"],"title":"Racing Robot","type":"project"},{"authors":null,"categories":null,"content":"Robust Arduino Serial is a simple and robust serial communication protocol. It was designed to make two Arduinos communicate, but can also be useful when you want a computer (e.g. a Raspberry Pi) to communicate with an Arduino.\nPlease read the Medium Article to have an overview of this protocol.\nImplementations are available in various programming languages:\nArduino (arduino-serial/ folder) Python C++ Rust ","date":1508976000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508976000,"objectID":"89f85cdeaf6edf9b18c5ba0f38ab3754","permalink":"/project/arduino-robust-serial/","publishdate":"2017-10-26T00:00:00Z","relpermalink":"/project/arduino-robust-serial/","section":"project","summary":"A simple and robust serial communication protocol. Implementation in C Arduino, C++, Python and Rust.","tags":["Python","State Representation Learning","Robotics","Arduino","Rust","C++"],"title":"Arduino Robust Serial","type":"project"},{"authors":["Antonin Raffin","Sebastian Höfer","Rico Jonschkowski","Oliver Brock","Freek Stulp"],"categories":null,"content":"","date":1472688000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1472688000,"objectID":"5382672b2659be28c3190eaa44bbda83","permalink":"/publication/multiple-tasks-srl/","publishdate":"2016-09-01T00:00:00Z","relpermalink":"/publication/multiple-tasks-srl/","section":"publication","summary":"We present an approach for learning state representations in multi-task reinforcement learning. Our method learns multiple low-dimensional state representations from raw observations in an unsupervised fashion, without any knowledge of which task is executed, nor of the number of tasks involved. The method is based on a gated neural network architecture, trained with an extension of the learning with robotic priors objective. In simulated experiments, we show that our method is able to learn better state representations for reinforcement learning, and we analyze why and when it manages to do so.","tags":["Reinforcement Learning,","State Representation Learning"],"title":"Unsupervised learning of state representations for multiple tasks","type":"publication"}]